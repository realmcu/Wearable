<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\app.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\app.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Thu Jul  4 16:59:25 2024
<BR><P>
<H3>Maximum Stack Usage =       1528 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Reset_Handler &rArr; main &rArr; CODA_Test &rArr; JPU_DecStartOneFrame &rArr; JpegDecodeHeader &rArr; wraparound_bistream_data &rArr; jpg_malloc &rArr; tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">HardFault_Handler</a><BR>
 <LI><a href="#[12f]">UART_SendData</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12f]">UART_SendData</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">GDMA_Cmd_rom</a> from rtl876x_gdma.o(.text) referenced from boot_rom_func_ptr.o(.data.GDMA_Cmd)
 <LI><a href="#[1d]">GDMA_Init_rom</a> from rtl876x_gdma.o(.text) referenced from boot_rom_func_ptr.o(.data.GDMA_Init)
 <LI><a href="#[1]">HardFault_Handler</a> from bb2plus_platform.o(.text) referenced from vector_table.o(VECTOR)
 <LI><a href="#[12]">JPU_DecGiveCommand</a> from jpuapi.o(.text) referenced from jpeg_decoder.o(.text)
 <LI><a href="#[15]">JpuGbuGetBit</a> from jpuapifunc_rt.o(.text) referenced 2 times from jpuapifunc_rt.o(.text)
 <LI><a href="#[1e]">NVIC_Init_rom</a> from rtl876x_nvic.o(.text) referenced from boot_rom_func_ptr.o(.data.NVIC_Init)
 <LI><a href="#[1f]">Pad_AllConfigDefault_rom</a> from rtl876x_pinmux.o(.text) referenced from boot_rom_func_ptr.o(.data.Pad_AllConfigDefault)
 <LI><a href="#[21]">Pad_ConfigExt_rom</a> from rtl876x_pinmux.o(.text) referenced from boot_rom_func_ptr.o(.data.Pad_ConfigExt)
 <LI><a href="#[20]">Pad_Config_rom</a> from rtl876x_pinmux.o(.text) referenced from boot_rom_func_ptr.o(.data.Pad_Config)
 <LI><a href="#[22]">Pad_WakeUpCmd_rom</a> from rtl876x_pinmux.o(.text) referenced from boot_rom_func_ptr.o(.data.Pad_WakeUpCmd)
 <LI><a href="#[27]">Pad_WakeupInterruptValue</a> from rtl876x_pinmux.o(.text) referenced from boot_rom_func_ptr.o(.data.System_WakeUpInterruptValue)
 <LI><a href="#[3]">PendSV_Handler</a> from portasm.o(.text) referenced from port.o(.text)
 <LI><a href="#[3]">PendSV_Handler</a> from portasm.o(.text) referenced from vector_table.o(VECTOR)
 <LI><a href="#[23]">Pinmux_Config_rom</a> from rtl876x_pinmux.o(.text) referenced from boot_rom_func_ptr.o(.data.Pinmux_Config)
 <LI><a href="#[24]">RCC_PeriphClockCmd_rom</a> from rtl876x_rcc.o(.text) referenced from boot_rom_func_ptr.o(.data.RCC_PeriphClockCmd)
 <LI><a href="#[9]">RamVectorTableUpdate</a> from vector_table.o(.text) referenced from port.o(.text)
 <LI><a href="#[0]">Reset_Handler</a> from system_bb2plus.o(.text) referenced from vector_table.o(VECTOR)
 <LI><a href="#[2]">SVC_Handler</a> from portasm.o(.text) referenced from port.o(.text)
 <LI><a href="#[2]">SVC_Handler</a> from portasm.o(.text) referenced from vector_table.o(VECTOR)
 <LI><a href="#[4]">SysTick_Handler</a> from port.o(.text) referenced from port.o(.text)
 <LI><a href="#[4]">SysTick_Handler</a> from port.o(.text) referenced from vector_table.o(VECTOR)
 <LI><a href="#[25]">System_WakeUpInterruptDisable_rom</a> from rtl876x_pinmux.o(.text) referenced from boot_rom_func_ptr.o(.data.System_WakeUpInterruptDisable)
 <LI><a href="#[26]">System_WakeUpInterruptEnable_rom</a> from rtl876x_pinmux.o(.text) referenced from boot_rom_func_ptr.o(.data.System_WakeUpInterruptEnable)
 <LI><a href="#[28]">System_WakeUpPinDisable_rom</a> from rtl876x_pinmux.o(.text) referenced from boot_rom_func_ptr.o(.data.System_WakeUpPinDisable)
 <LI><a href="#[29]">System_WakeUpPinEnable_rom</a> from rtl876x_pinmux.o(.text) referenced from boot_rom_func_ptr.o(.data.System_WakeUpPinEnable)
 <LI><a href="#[2a]">UART_INTConfig_rom</a> from rtl876x_uart.o(.text) referenced from boot_rom_func_ptr.o(.data.UART_INTConfig)
 <LI><a href="#[2b]">UART_Init_rom</a> from rtl876x_uart.o(.text) referenced from boot_rom_func_ptr.o(.data.UART_Init)
 <LI><a href="#[2c]">UART_SetBaudRate_rom</a> from rtl876x_uart.o(.text) referenced from boot_rom_func_ptr.o(.data.UART_SetBaudRate)
 <LI><a href="#[1b]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[19]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[18]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
 <LI><a href="#[f]">aon_indirect_write_reg_safe</a> from indirect_access.o(.text) referenced from platform_rtc.o(.text)
 <LI><a href="#[11]">app_main_task</a> from app_task.o(.text) referenced from app_task.o(.text)
 <LI><a href="#[e]">btaon_fast_write_safe</a> from indirect_access.o(.text) referenced from rtl876x_pinmux.o(.text)
 <LI><a href="#[16]">default_walker</a> from tlsf.o(.text) referenced from tlsf.o(.text)
 <LI><a href="#[2f]">delay_ms_asm</a> from utils.o(.text) referenced from utils.o(.data.platform_delay_ms)
 <LI><a href="#[30]">delay_us_asm</a> from utils.o(.text) referenced from utils.o(.data.platform_delay_us)
 <LI><a href="#[1a]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[17]">integrity_walker</a> from tlsf.o(.text) referenced from tlsf.o(.text)
 <LI><a href="#[14]">jdi_read_register</a> from jdi.o(.text) referenced 2 times from jpuapi.o(.text)
 <LI><a href="#[13]">jdi_write_register</a> from jdi.o(.text) referenced 6 times from jpuapi.o(.text)
 <LI><a href="#[2d]">log_direct_rom</a> from log.o(.text) referenced from log.o(.data.log_direct)
 <LI><a href="#[6]">prvIdleTask</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[8]">prvTaskExitError</a> from port.o(.text) referenced from port.o(.text)
 <LI><a href="#[7]">prvTimerTask</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[2e]">sys_timestamp_get_rom</a> from log.o(.text) referenced from log.o(.data.log_timestamp_get_patch)
 <LI><a href="#[2e]">sys_timestamp_get_rom</a> from log.o(.text) referenced from log.o(.data.sys_timestamp_get_patch)
 <LI><a href="#[10]">test_timer_cb</a> from app_task.o(.text) referenced from app_task.o(.text)
 <LI><a href="#[5]">vListInitialise</a> from list.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[d]">vPortSVCHandler_C</a> from port.o(.text.vPortSVCHandler_C) referenced from portasm.o(.text)
 <LI><a href="#[c]">vReceiverTask</a> from freertos_test.o(.text) referenced from freertos_test.o(.text)
 <LI><a href="#[a]">vSenderTask</a> from freertos_test.o(.text) referenced from freertos_test.o(.text)
 <LI><a href="#[b]">xTaskCreate</a> from tasks.o(.text) referenced from freertos_test.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[32]"></a>xEventGroupCreate</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[34]"></a>xEventGroupSync</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[38]"></a>xEventGroupSetBits</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupSetBitsCallback
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
</UL>

<P><STRONG><a name="[40]"></a>xEventGroupWaitBits</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[41]"></a>xEventGroupClearBits</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupClearBitsCallback
</UL>

<P><STRONG><a name="[42]"></a>xEventGroupGetBitsFromISR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[44]"></a>vEventGroupDelete</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[46]"></a>vEventGroupSetBitsCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[47]"></a>vEventGroupClearBitsCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>

<P><STRONG><a name="[5]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[7c]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[87]"></a>vListInsert</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[81]"></a>uxListRemove</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[48]"></a>xQueueGenericReset</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[4b]"></a>xQueueGenericCreate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_freertos
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateSet
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[4c]"></a>xQueueCreateMutex</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[4e]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[4d]"></a>xQueueGenericSend</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueGenericSend &rArr; OUTLINED_FUNCTION_0 &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSenderTask
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCall
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_msg_to_apptask
</UL>

<P><STRONG><a name="[59]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[5a]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>

<P><STRONG><a name="[5f]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[64]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[65]"></a>xQueueGiveFromISR</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[66]"></a>xQueueReceive</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueReceive &rArr; OUTLINED_FUNCTION_0 &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vReceiverTask
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSelectFromSet
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[69]"></a>xQueuePeek</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[6a]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSelectFromSetFromISR
</UL>

<P><STRONG><a name="[6b]"></a>xQueuePeekFromISR</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[6c]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[6d]"></a>uxQueueSpacesAvailable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[6e]"></a>uxQueueMessagesWaitingFromISR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[6f]"></a>vQueueDelete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[70]"></a>xQueueIsQueueEmptyFromISR</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[71]"></a>xQueueIsQueueFullFromISR</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[72]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[74]"></a>xQueueCreateSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[75]"></a>xQueueAddToSet</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[76]"></a>xQueueRemoveFromSet</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[77]"></a>xQueueSelectFromSet</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[78]"></a>xQueueSelectFromSetFromISR</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>

<P><STRONG><a name="[b]"></a>xTaskCreate</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_test.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>vTaskDelete</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[85]"></a>vTaskDelayUntil</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[37]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[3a]"></a>xTaskResumeAll</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[8b]"></a>vTaskDelay</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[8c]"></a>eTaskGetState</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[8d]"></a>uxTaskPriorityGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>

<P><STRONG><a name="[8e]"></a>uxTaskPriorityGetFromISR</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[8f]"></a>vTaskPrioritySet</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[91]"></a>vTaskSuspend</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[92]"></a>vTaskSwitchContext</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[93]"></a>vTaskResume</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[96]"></a>xTaskResumeFromISR</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[99]"></a>vTaskStartScheduler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[9d]"></a>vTaskEndScheduler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEndScheduler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[8a]"></a>xTaskIncrementTick</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskIncrementTick &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b5]"></a>xTaskGetTickCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_timer_init
</UL>

<P><STRONG><a name="[29f]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>pcTaskGetName</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[79]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[39]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
</UL>

<P><STRONG><a name="[73]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[4a]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>

<P><STRONG><a name="[3f]"></a>vTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[a0]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[50]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[53]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskCheckForTimeOut &rArr; OUTLINED_FUNCTION_2 &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[63]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[4f]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[36]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
</UL>

<P><STRONG><a name="[5c]"></a>xTaskPriorityInherit</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[61]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskPriorityDisinherit &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[5e]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[3c]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
</UL>

<P><STRONG><a name="[5d]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[a1]"></a>ulTaskNotifyTake</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>

<P><STRONG><a name="[a2]"></a>xTaskNotifyWait</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>

<P><STRONG><a name="[a3]"></a>xTaskGenericNotify</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[a4]"></a>xTaskGenericNotifyFromISR</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[a5]"></a>vTaskNotifyGiveFromISR</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[a6]"></a>xTaskNotifyStateClear</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[9a]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[ab]"></a>xTimerCreate</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_timer_init
</UL>

<P><STRONG><a name="[aa]"></a>xTimerGenericCommand</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; OUTLINED_FUNCTION_0 &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_timer_init
</UL>

<P><STRONG><a name="[ac]"></a>xTimerGetTimerDaemonTaskHandle</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[ad]"></a>xTimerGetPeriod</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[ae]"></a>xTimerGetExpiryTime</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[af]"></a>pcTimerGetName</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[b0]"></a>xTimerIsTimerActive</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[b1]"></a>pvTimerGetTimerID</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[b2]"></a>vTimerSetTimerID</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[b3]"></a>xTimerPendFunctionCallFromISR</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[b4]"></a>xTimerPendFunctionCall</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[b6]"></a>systick_clk_src_setup_rom</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, port.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
</UL>

<P><STRONG><a name="[b9]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, port.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_clk_src_setup_rom
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[3b]"></a>vPortYield</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSenderTask
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
</UL>

<P><STRONG><a name="[3d]"></a>vPortEnterCritical</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetTimerID
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueRemoveFromSet
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueAddToSet
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
</UL>

<P><STRONG><a name="[3e]"></a>vPortExitCritical</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetTimerID
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueRemoveFromSet
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueAddToSet
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
</UL>

<P><STRONG><a name="[4]"></a>SysTick_Handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Address Reference Count : 2]<UL><LI> vector_table.o(VECTOR)
<LI> port.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>pxPortInitialiseStack</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[9b]"></a>xPortStartScheduler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, port.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartFirstTask
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[9e]"></a>vPortEndScheduler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, port.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
</UL>

<P><STRONG><a name="[2a1]"></a>xPortIsInsideInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, port.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>vApplicationIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[bc]"></a>xPortStartSchedulerInRestore</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[d]"></a>vPortSVCHandler_C</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(.text.vPortSVCHandler_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortSVCHandler_C
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRestoreContextOfFirstTask
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> portasm.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[be]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[c0]"></a>__scatterload_rt2</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2a2]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2a3]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[c1]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[2a4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[2a5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[c2]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[260]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[c4]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[c6]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[c8]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[c9]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[ca]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[2a6]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[cc]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ce]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[cf]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d0]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[d2]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[d4]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[d6]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[d7]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[d8]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[da]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[2a7]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[dc]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[de]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[e0]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[e2]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[2a8]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[f2]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[e4]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[e6]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit5.o(.ARM.Collect$$libinit$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2a9]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[2aa]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[2ab]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[e8]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[2ac]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[2ad]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2ae]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[ea]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[2af]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2b0]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[2b1]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2b2]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[2b3]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2b4]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[2b5]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2b6]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2b7]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000026))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[2b8]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[2b9]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2ba]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[2bb]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[2bc]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[2bd]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[f7]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[2be]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[ef]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[2bf]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[2c0]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2c1]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[2c2]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[2c3]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[2c4]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[bf]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[2c5]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2c6]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[f1]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[2c7]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[f3]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; CODA_Test &rArr; JPU_DecStartOneFrame &rArr; JpegDecodeHeader &rArr; wraparound_bistream_data &rArr; jpg_malloc &rArr; tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2c8]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[288]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[f6]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[2c9]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[f8]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bb2plus_platform.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_table.o(VECTOR)
</UL>
<P><STRONG><a name="[2ca]"></a>AON_Read</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bb2plus_platform.o(.text), UNUSED)

<P><STRONG><a name="[2cb]"></a>AON_Write</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bb2plus_platform.o(.text), UNUSED)

<P><STRONG><a name="[2cc]"></a>AON_Read_Safe</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bb2plus_platform.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>AON_Write_Safe</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bb2plus_platform.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>SystemInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_bb2plus.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, system_bb2plus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528 + Unknown Stack Size
<LI>Call Chain = Reset_Handler &rArr; main &rArr; CODA_Test &rArr; JPU_DecStartOneFrame &rArr; JpegDecodeHeader &rArr; wraparound_bistream_data &rArr; jpg_malloc &rArr; tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_table.o(VECTOR)
</UL>
<P><STRONG><a name="[2cf]"></a>Set_platform_Clock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bb2plus.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>HardFault_Handler_C</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bb2plus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_C
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_C
</UL>

<P><STRONG><a name="[2d0]"></a>second_level_isr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, vector_table.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>RamVectorTableInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, vector_table.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>RamVectorTableUpdate</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, vector_table.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[33]"></a>pvPortMalloc</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>

<P><STRONG><a name="[45]"></a>vPortFree</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
</UL>

<P><STRONG><a name="[2d2]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>xPortGetMinimumEverFreeHeapSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[2d4]"></a>vPortInitialiseBlocks</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>test_freertos</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, freertos_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[bd]"></a>vRestoreContextOfFirstTask</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, portasm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSVCHandler_C
</UL>

<P><STRONG><a name="[2d5]"></a>xIsPrivileged</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, portasm.o(.text), UNUSED)

<P><STRONG><a name="[2d6]"></a>vRaisePrivilege</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, portasm.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>vResetPrivilege</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, portasm.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>vStartFirstTask</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, portasm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[35]"></a>ulSetInterruptMask</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, portasm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSVCHandler_C
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vReceiverTask
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSenderTask
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCall
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetTimerID
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcTimerGetName
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGetExpiryTime
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGetPeriod
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGetTimerDaemonTaskHandle
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcTaskGetName
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEndScheduler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGetFromISR
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueIsQueueFullFromISR
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueIsQueueEmptyFromISR
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaitingFromISR
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupGetBitsFromISR
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[43]"></a>vClearInterruptMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, portasm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGetFromISR
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupGetBitsFromISR
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[3]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, portasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 2]<UL><LI> vector_table.o(VECTOR)
<LI> port.o(.text)
</UL>
<P><STRONG><a name="[2]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, portasm.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> vector_table.o(VECTOR)
<LI> port.o(.text)
</UL>
<P><STRONG><a name="[2d8]"></a>SYSTEMTICK_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, systemtick.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>Initial_SystemTick</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, systemtick.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEMTICK_Set2DelayMsMode
</UL>

<P><STRONG><a name="[2d9]"></a>SYSTEMTICK_ReEnable_Cnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systemtick.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>SYSTEMTICK_Set2DelayMsMode</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, systemtick.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_SystemTick
</UL>

<P><STRONG><a name="[2da]"></a>SYSTEMTICK_DelayMs</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, systemtick.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>SYSTEMTICK_DelayUs</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, systemtick.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>init_timer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, time_adapter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Timer_Init
</UL>

<P><STRONG><a name="[102]"></a>delay_us</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, time_adapter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Timer_DelayUs
</UL>

<P><STRONG><a name="[104]"></a>delay_ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, time_adapter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Timer_DelayMs
</UL>

<P><STRONG><a name="[101]"></a>HW_Timer_Init</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, bb2plus_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
</UL>

<P><STRONG><a name="[103]"></a>HW_Timer_DelayUs</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bb2plus_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[105]"></a>HW_Timer_DelayMs</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bb2plus_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[107]"></a>log_uart_hw_init</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, log_adapter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = log_uart_hw_init &rArr; UART_ComputeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HwClock
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ComputeDiv
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StructInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pinmux_Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_system_init_
</UL>

<P><STRONG><a name="[10c]"></a>log_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, log_adapter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_hw_init
</UL>

<P><STRONG><a name="[10d]"></a>log_print</STRONG> (Thumb, 58 bytes, Stack size 288 bytes, log_adapter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[2dc]"></a>GDMA_HwClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtl876x_gdma.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>GDMA_DeInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtl876x_gdma.o(.text), UNUSED)

<P><STRONG><a name="[1d]"></a>GDMA_Init_rom</STRONG> (Thumb, 616 bytes, Stack size 48 bytes, rtl876x_gdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GDMA_Init_rom
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_IsGatherScatterChannel
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_IsValidHandshake
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_GetHandshakeNum
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_GetGDMAChannelNum
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_GetGDMAx
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_rom_func_ptr.o(.data.GDMA_Init)
</UL>
<P><STRONG><a name="[2de]"></a>GDMA_StructInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rtl876x_gdma.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>GDMA_Cmd_rom</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, rtl876x_gdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GDMA_Cmd_rom
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_GetGDMAChannelx
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_GetGDMAxByCh
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_GetGDMAChannelNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_rom_func_ptr.o(.data.GDMA_Cmd)
</UL>
<P><STRONG><a name="[2df]"></a>GDMA_GetSuspendChannelStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_gdma.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>GDMA_GetSuspendCmdStatus</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtl876x_gdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[11a]"></a>GDMA_INTConfig</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rtl876x_gdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_GetGDMAxByCh
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_GetGDMAChannelNum
</UL>

<P><STRONG><a name="[11b]"></a>GDMA_GetTransferINTStatus</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtl876x_gdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_GetGDMAxByCh
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[11d]"></a>GDMA_ClearAllTypeINT</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtl876x_gdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_GetGDMAxByCh
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[11e]"></a>GDMA_GetChannelStatus</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtl876x_gdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_GetGDMAxByCh
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[11f]"></a>GDMA_ClearINTPendingBit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rtl876x_gdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_GetGDMAxByCh
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_GetGDMAChannelNum
</UL>

<P><STRONG><a name="[2e0]"></a>GDMA_SafeSuspend</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rtl876x_gdma.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>GDMA_SetSourceAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_gdma.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>GDMA_SetDestinationAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_gdma.o(.text), UNUSED)

<P><STRONG><a name="[2e3]"></a>GDMA_SetLLPAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_gdma.o(.text), UNUSED)

<P><STRONG><a name="[2e4]"></a>GDMA_SetBufferSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_gdma.o(.text), UNUSED)

<P><STRONG><a name="[2e5]"></a>GDMA_GetSrcTransferAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_gdma.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>GDMA_GetDstTransferAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_gdma.o(.text), UNUSED)

<P><STRONG><a name="[2e7]"></a>GDMA_GetTransferLen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtl876x_gdma.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>GDMA_GetFIFOStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtl876x_gdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[2e8]"></a>GDMA_SuspendCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtl876x_gdma.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>GDMA_SetLLPMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtl876x_gdma.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>GPIO_DeInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>GPIO_Init</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, rtl876x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ExtDebUpdate
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ExtDebCmd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ExtPolarity
</UL>

<P><STRONG><a name="[2eb]"></a>GPIO_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2ec]"></a>GPIO_INTConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>GPIO_ClearINTPendingBit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>GPIO_MaskINTConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2ef]"></a>GPIO_SetOutputMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2f1]"></a>GPIO_ReadInputData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>GPIO_SetBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2f5]"></a>GPIO_ResetBits</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>GPIO_WriteBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>GPIO_GetINTStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[2f8]"></a>GPIO_SetDirection</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>GPIO_GetPadStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[128]"></a>GPIO_SetPolarity</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ExtPolarity
</UL>

<P><STRONG><a name="[1e]"></a>NVIC_Init_rom</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, rtl876x_nvic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init_rom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_rom_func_ptr.o(.data.NVIC_Init)
</UL>
<P><STRONG><a name="[24]"></a>RCC_PeriphClockCmd_rom</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rtl876x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_PeriphClockCmd_rom &rArr; RCC_PeriFunctionConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriFunctionConfig
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriClockConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_rom_func_ptr.o(.data.RCC_PeriphClockCmd)
</UL>
<P><STRONG><a name="[129]"></a>RCC_PeriClockConfig</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, rtl876x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_PeriClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphClockCmd_rom
</UL>

<P><STRONG><a name="[12a]"></a>RCC_PeriFunctionConfig</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, rtl876x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_PeriFunctionConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphClockCmd_rom
</UL>

<P><STRONG><a name="[10b]"></a>UART_HwClock</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, rtl876x_uart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_hw_init
</UL>

<P><STRONG><a name="[2b]"></a>UART_Init_rom</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, rtl876x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Init_rom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_rom_func_ptr.o(.data.UART_Init)
</UL>
<P><STRONG><a name="[12d]"></a>UART_DeInit</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, rtl876x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[109]"></a>UART_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtl876x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_hw_init
</UL>

<P><STRONG><a name="[12e]"></a>UART_ReceiveData</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtl876x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
</UL>

<P><STRONG><a name="[12f]"></a>UART_SendData</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtl876x_uart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxData
</UL>

<P><STRONG><a name="[2a]"></a>UART_INTConfig_rom</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, rtl876x_uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_rom_func_ptr.o(.data.UART_INTConfig)
</UL>
<P><STRONG><a name="[2f9]"></a>UART_LoopBackCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtl876x_uart.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>UART_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rtl876x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxData
</UL>

<P><STRONG><a name="[2fa]"></a>UART_GetLineStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtl876x_uart.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>UART_SendByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_uart.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>UART_ReceiveByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtl876x_uart.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>UART_GetIID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_uart.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>UART_ClearTxFIFO</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtl876x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[132]"></a>UART_ClearRxFIFO</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtl876x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[2fe]"></a>UART_GetTxFIFODataLen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_uart.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>UART_GetRxFIFODataLen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_uart.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>UART_TxDmaCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtl876x_uart.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>UART_RxDmaCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtl876x_uart.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>UART_SetBaudRate_rom</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtl876x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetBaudRate_rom &rArr; UART_ComputeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ComputeDiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_rom_func_ptr.o(.data.UART_SetBaudRate)
</UL>
<P><STRONG><a name="[302]"></a>UART_SetParams</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtl876x_uart.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>UART_IdleIntConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rtl876x_uart.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>UART_MaskINTConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtl876x_uart.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>Pad_TableConfig</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rtl876x_pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Pad_TableConfig &rArr; btaon_fast_write_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_HighSpeedFuncSel
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_HighSpeedMuxSel
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_WakeUpInterruptDisable_rom
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_WakeUpInterruptEnable_rom
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_WakeUpPinDisable_rom
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_WakeUpPinEnable_rom
</UL>

<P><STRONG><a name="[135]"></a>Pad_TableUpdate</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtl876x_pinmux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_update
</UL>

<P><STRONG><a name="[23]"></a>Pinmux_Config_rom</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rtl876x_pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pinmux_Config_rom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_rom_func_ptr.o(.data.Pinmux_Config)
</UL>
<P><STRONG><a name="[108]"></a>Pinmux_Deinit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtl876x_pinmux.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_hw_init
</UL>

<P><STRONG><a name="[305]"></a>Pinmux_Reset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_pinmux.o(.text), UNUSED)

<P><STRONG><a name="[20]"></a>Pad_Config_rom</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, rtl876x_pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Pad_Config_rom &rArr; btaon_fast_write_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_rom_func_ptr.o(.data.Pad_Config)
</UL>
<P><STRONG><a name="[21]"></a>Pad_ConfigExt_rom</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, rtl876x_pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Pad_ConfigExt_rom &rArr; btaon_fast_write_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_rom_func_ptr.o(.data.Pad_ConfigExt)
</UL>
<P><STRONG><a name="[1f]"></a>Pad_AllConfigDefault_rom</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, rtl876x_pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Pad_AllConfigDefault_rom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_rom_func_ptr.o(.data.Pad_AllConfigDefault)
</UL>
<P><STRONG><a name="[29]"></a>System_WakeUpPinEnable_rom</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rtl876x_pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = System_WakeUpPinEnable_rom &rArr; Pad_TableConfig &rArr; btaon_fast_write_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_TableConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_rom_func_ptr.o(.data.System_WakeUpPinEnable)
</UL>
<P><STRONG><a name="[28]"></a>System_WakeUpPinDisable_rom</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtl876x_pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = System_WakeUpPinDisable_rom &rArr; Pad_TableConfig &rArr; btaon_fast_write_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_TableConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_rom_func_ptr.o(.data.System_WakeUpPinDisable)
</UL>
<P><STRONG><a name="[26]"></a>System_WakeUpInterruptEnable_rom</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtl876x_pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = System_WakeUpInterruptEnable_rom &rArr; Pad_TableConfig &rArr; btaon_fast_write_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_TableConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_rom_func_ptr.o(.data.System_WakeUpInterruptEnable)
</UL>
<P><STRONG><a name="[25]"></a>System_WakeUpInterruptDisable_rom</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtl876x_pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = System_WakeUpInterruptDisable_rom &rArr; Pad_TableConfig &rArr; btaon_fast_write_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_TableConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_rom_func_ptr.o(.data.System_WakeUpInterruptDisable)
</UL>
<P><STRONG><a name="[13a]"></a>Pad_ClearWakeupINTPendingBit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtl876x_pinmux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
</UL>

<P><STRONG><a name="[13b]"></a>Pad_ClearAllWakeupINT</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rtl876x_pinmux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[13d]"></a>Pad_SetPullMode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtl876x_pinmux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>

<P><STRONG><a name="[27]"></a>Pad_WakeupInterruptValue</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtl876x_pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pad_WakeupInterruptValue
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_rom_func_ptr.o(.data.System_WakeUpInterruptValue)
</UL>
<P><STRONG><a name="[13e]"></a>Pad_FunctionConfig</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtl876x_pinmux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_update_safe
</UL>

<P><STRONG><a name="[140]"></a>Pad_GetModeConfig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rtl876x_pinmux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[141]"></a>Pad_GetOutputCtrl</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtl876x_pinmux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[22]"></a>Pad_WakeUpCmd_rom</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, rtl876x_pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Pad_WakeUpCmd_rom &rArr; btaon_fast_write_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_rom_func_ptr.o(.data.Pad_WakeUpCmd)
</UL>
<P><STRONG><a name="[143]"></a>Pad_HighSpeedMuxSel</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rtl876x_pinmux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_TableConfig
</UL>

<P><STRONG><a name="[144]"></a>Pad_HighSpeedFuncSel</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rtl876x_pinmux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_TableConfig
</UL>

<P><STRONG><a name="[306]"></a>indirect_access_read_32k_reg</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, indirect_access.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>indirect_access_write_32k_reg</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, indirect_access.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>btaon_fast_read</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, indirect_access.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_clk_src_setup_rom
</UL>

<P><STRONG><a name="[149]"></a>btaon_fast_read_8b</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, indirect_access.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_update_8b
</UL>

<P><STRONG><a name="[134]"></a>btaon_fast_read_safe</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, indirect_access.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe_8b
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_WakeUpCmd_rom
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_GetModeConfig
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_update_safe
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_WakeupInterruptValue
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_SetPullMode
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_TableConfig
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[14c]"></a>btaon_fast_read_safe_8b</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, indirect_access.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_update_safe_8b
</UL>

<P><STRONG><a name="[b8]"></a>btaon_fast_write</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, indirect_access.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_update
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_clk_src_setup_rom
</UL>

<P><STRONG><a name="[14a]"></a>btaon_fast_write_8b</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, indirect_access.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_update_8b
</UL>

<P><STRONG><a name="[e]"></a>btaon_fast_write_safe</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, indirect_access.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btaon_fast_write_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_WakeUpCmd_rom
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_update_safe
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_SetPullMode
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_ClearWakeupINTPendingBit
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_ConfigExt_rom
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config_rom
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_TableConfig
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_system_init_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtl876x_pinmux.o(.text)
</UL>
<P><STRONG><a name="[146]"></a>btaon_fast_write_safe_8b</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, indirect_access.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_update_safe_8b
</UL>

<P><STRONG><a name="[136]"></a>btaon_fast_update</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, indirect_access.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_TableUpdate
</UL>

<P><STRONG><a name="[147]"></a>btaon_fast_update_8b</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, indirect_access.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_8b
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_8b
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[13f]"></a>btaon_fast_update_safe</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, indirect_access.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_FunctionConfig
</UL>

<P><STRONG><a name="[14b]"></a>btaon_fast_update_safe_8b</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, indirect_access.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe_8b
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe_8b
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[f]"></a>aon_indirect_write_reg_safe</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, indirect_access.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aon_indirect_write_reg_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_rtc_initiate_interrupt
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_rtc_set_comp
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_rtc_comp_config
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_rtc_nmi_enable
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_rtc_system_wakeup_config
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_rtc_run_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_rtc.o(.text)
</UL>
<P><STRONG><a name="[152]"></a>aon_indirect_read_reg_safe</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, indirect_access.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_rtc_clear_status
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_rtc_get_interrupt_status
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_rtc_get_counter
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_rtc_initiate_interrupt
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_rtc_comp_config
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[14d]"></a>platform_rtc_run_cmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, platform_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aon_indirect_write_reg_safe
</UL>

<P><STRONG><a name="[14f]"></a>platform_rtc_system_wakeup_config</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, platform_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aon_indirect_write_reg_safe
</UL>

<P><STRONG><a name="[150]"></a>platform_rtc_nmi_enable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, platform_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aon_indirect_write_reg_safe
</UL>

<P><STRONG><a name="[151]"></a>platform_rtc_comp_config</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, platform_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aon_indirect_read_reg_safe
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aon_indirect_write_reg_safe
</UL>

<P><STRONG><a name="[153]"></a>platform_rtc_set_comp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, platform_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aon_indirect_write_reg_safe
</UL>

<P><STRONG><a name="[154]"></a>platform_rtc_initiate_interrupt</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, platform_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aon_indirect_read_reg_safe
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aon_indirect_write_reg_safe
</UL>

<P><STRONG><a name="[155]"></a>platform_rtc_get_counter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, platform_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aon_indirect_read_reg_safe
</UL>

<P><STRONG><a name="[156]"></a>platform_rtc_get_interrupt_status</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, platform_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aon_indirect_read_reg_safe
</UL>

<P><STRONG><a name="[157]"></a>platform_rtc_clear_status</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, platform_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aon_indirect_read_reg_safe
</UL>

<P><STRONG><a name="[30]"></a>delay_us_asm</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, utils.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> utils.o(.data.platform_delay_us)
</UL>
<P><STRONG><a name="[2f]"></a>delay_ms_asm</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, utils.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> utils.o(.data.platform_delay_ms)
</UL>
<P><STRONG><a name="[158]"></a>LogUartTxData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LogUartTxData &rArr; UART_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxData
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct_rom
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>

<P><STRONG><a name="[15a]"></a>log_out</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, log.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUartTxData
</UL>

<P><STRONG><a name="[2e]"></a>sys_timestamp_get_rom</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, log.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> log.o(.data.sys_timestamp_get_patch)
<LI> log.o(.data.log_timestamp_get_patch)
</UL>
<P><STRONG><a name="[308]"></a>sys_timestamp_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, log.o(.text), UNUSED)

<P><STRONG><a name="[309]"></a>log_timestamp_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, log.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>trace_header_build</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, log.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>log_direct_rom</STRONG> (Thumb, 132 bytes, Stack size 280 bytes, log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = log_direct_rom &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUartTxData
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log.o(.data.log_direct)
</UL>
<P><STRONG><a name="[159]"></a>UART_TxData</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rtl876x_uart_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUartTxData
</UL>

<P><STRONG><a name="[30b]"></a>UART_OneWireConfig</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, rtl876x_uart_int.o(.text), UNUSED)

<P><STRONG><a name="[30c]"></a>UART_ClkDivConfig</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, rtl876x_uart_int.o(.text), UNUSED)

<P><STRONG><a name="[30d]"></a>UART_ConvUartBaudRate</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtl876x_uart_int.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>UART_ConvRateValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtl876x_uart_int.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>UART_ComputeDiv</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtl876x_uart_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_ComputeDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBaudRate_rom
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_hw_init
</UL>

<P><STRONG><a name="[110]"></a>GDMA_GetGDMAx</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_gdma_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_Init_rom
</UL>

<P><STRONG><a name="[116]"></a>GDMA_GetGDMAxByCh</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_gdma_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_ClearINTPendingBit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_GetChannelStatus
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_ClearAllTypeINT
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_GetTransferINTStatus
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_INTConfig
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_Cmd_rom
</UL>

<P><STRONG><a name="[111]"></a>GDMA_GetGDMAChannelNum</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtl876x_gdma_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_ClearINTPendingBit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_INTConfig
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_Cmd_rom
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_Init_rom
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[112]"></a>GDMA_GetHandshakeNum</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_gdma_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_Init_rom
</UL>

<P><STRONG><a name="[117]"></a>GDMA_GetGDMAChannelx</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtl876x_gdma_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_Cmd_rom
</UL>

<P><STRONG><a name="[113]"></a>GDMA_IsValidHandshake</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_gdma_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_Init_rom
</UL>

<P><STRONG><a name="[114]"></a>GDMA_IsGatherScatterChannel</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtl876x_gdma_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_Init_rom
</UL>

<P><STRONG><a name="[15d]"></a>TIM_GetTimerID</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtl876x_tim_int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClkConfig
</UL>

<P><STRONG><a name="[30f]"></a>TIM_GetCase</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rtl876x_tim_int.o(.text), UNUSED)

<P><STRONG><a name="[310]"></a>TIM_GetTimerShareBase</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rtl876x_tim_int.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>TIM_ClkConfig</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, rtl876x_tim_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetTimerID
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[161]"></a>TIM_PWMDZClockConfig</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rtl876x_tim_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[162]"></a>TIM_LatchTrigDebClkConfig</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rtl876x_tim_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[311]"></a>I2C_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rtl876x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>I2C_Init</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, rtl876x_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetClockSpeed
</UL>

<P><STRONG><a name="[164]"></a>I2C_SetClockSpeed</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, rtl876x_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetCompIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[312]"></a>I2C_StructInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtl876x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[313]"></a>I2C_Cmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtl876x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>I2C_CheckAbortStatus</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, rtl876x_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RepeatRead
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRead
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWriteDevice
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWrite
</UL>

<P><STRONG><a name="[166]"></a>I2C_MasterWrite</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, rtl876x_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckAbortStatus
</UL>

<P><STRONG><a name="[314]"></a>I2C_GetFlagState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtl876x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>I2C_MasterWriteDevice</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, rtl876x_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckAbortStatus
</UL>

<P><STRONG><a name="[169]"></a>I2C_MasterRead</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, rtl876x_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckAbortStatus
</UL>

<P><STRONG><a name="[16a]"></a>I2C_RepeatRead</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, rtl876x_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckAbortStatus
</UL>

<P><STRONG><a name="[315]"></a>I2C_INTConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtl876x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[316]"></a>I2C_ClearINTPendingBit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, rtl876x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[317]"></a>I2C_SetSlaveAddress</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtl876x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>I2C_SendCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtl876x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[319]"></a>I2C_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtl876x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>I2C_GetRxFIFOLen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtl876x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>I2C_GetTxFIFOLen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtl876x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[31c]"></a>I2C_ClearAllINT</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[31d]"></a>I2C_CheckEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtl876x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[31e]"></a>I2C_GetINTStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtl876x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[31f]"></a>I2C_GDMACmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtl876x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>I2C_RxFIFOFullHoldCtrl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>I2C_GetCompIndex</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rtl876x_i2c_int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetClockSpeed
</UL>

<P><STRONG><a name="[321]"></a>I2C_ClkDivConfig</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, rtl876x_i2c_int.o(.text), UNUSED)

<P><STRONG><a name="[322]"></a>SPI_DeInit</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>SPI_Master_Init</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ConfigAPHBridge
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[171]"></a>SPI_Master_JDI_Init</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SPI1AHBBridgeConfig
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ConfigAPHBridge
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[174]"></a>SPI_Slave_Init</STRONG> (Thumb, 192 bytes, Stack size 20 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[173]"></a>SPI_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Slave_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_Init
</UL>

<P><STRONG><a name="[323]"></a>SPI_StructInit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtl876x_spi.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>SPI_Master_Cmd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>

<P><STRONG><a name="[177]"></a>SPI_Master_JDI_Cmd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>

<P><STRONG><a name="[178]"></a>SPI_Slave_Cmd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>

<P><STRONG><a name="[324]"></a>SPI_Cmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>SPI_Master_SendBuffer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendBuffer
</UL>

<P><STRONG><a name="[17b]"></a>SPI_Master_JDI_SendBuffer</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendBuffer
</UL>

<P><STRONG><a name="[17c]"></a>SPI_Slave_SendBuffer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendBuffer
</UL>

<P><STRONG><a name="[17d]"></a>SPI_SendBuffer</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Slave_SendBuffer
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_SendBuffer
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_SendBuffer
</UL>

<P><STRONG><a name="[17e]"></a>SPI_Master_SendHalfWord</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendHalfWord
</UL>

<P><STRONG><a name="[180]"></a>SPI_Master_JDI_SendHalfWord</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendHalfWord
</UL>

<P><STRONG><a name="[181]"></a>SPI_Slave_SendHalfWord</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendHalfWord
</UL>

<P><STRONG><a name="[182]"></a>SPI_SendHalfWord</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Slave_SendHalfWord
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_SendHalfWord
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_SendHalfWord
</UL>

<P><STRONG><a name="[184]"></a>SPI_Master_SendWord</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendWord
</UL>

<P><STRONG><a name="[185]"></a>SPI_Master_JDI_SendWord</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendWord
</UL>

<P><STRONG><a name="[186]"></a>SPI_Slave_SendWord</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendWord
</UL>

<P><STRONG><a name="[183]"></a>SPI_SendWord</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Slave_SendWord
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_SendWord
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_SendWord
</UL>

<P><STRONG><a name="[188]"></a>SPI_Master_ClearINTPendingBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClearINTPendingBit
</UL>

<P><STRONG><a name="[189]"></a>SPI_Master_JDI_ClearINTPendingBit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClearINTPendingBit
</UL>

<P><STRONG><a name="[18a]"></a>SPI_Slave_ClearINTPendingBit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClearINTPendingBit
</UL>

<P><STRONG><a name="[187]"></a>SPI_ClearINTPendingBit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Slave_ClearINTPendingBit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_ClearINTPendingBit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_ClearINTPendingBit
</UL>

<P><STRONG><a name="[18b]"></a>SPI_Master_SendData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_SendData
</UL>

<P><STRONG><a name="[18d]"></a>SPI_Master_JDI_SendData</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
</UL>

<P><STRONG><a name="[325]"></a>SPI_Slave_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>SPI_SendData</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_SendData
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_SendData
</UL>

<P><STRONG><a name="[326]"></a>SPI_Master_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>SPI_Master_JDI_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>SPI_Slave_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)

<P><STRONG><a name="[329]"></a>SPI_ReceiveData</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>SPI_Master_GetTxFIFOLen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)

<P><STRONG><a name="[32b]"></a>SPI_Master_JDI_GetTxFIFOLen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)

<P><STRONG><a name="[32c]"></a>SPI_Slave_GetTxFIFOLen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)

<P><STRONG><a name="[32d]"></a>SPI_GetTxFIFOLen</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)

<P><STRONG><a name="[32e]"></a>SPI_Master_GetRxFIFOLen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)

<P><STRONG><a name="[32f]"></a>SPI_Master_JDI_GetRxFIFOLen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)

<P><STRONG><a name="[330]"></a>SPI_Slave_GetRxFIFOLen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>SPI_GetRxFIFOLen</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>SPI_Master_ChangeDirection</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ChangeDirection
</UL>

<P><STRONG><a name="[190]"></a>SPI_Master_JDI_ChangeDirection</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ChangeDirection
</UL>

<P><STRONG><a name="[191]"></a>SPI_ChangeDirection</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_ChangeDirection
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_ChangeDirection
</UL>

<P><STRONG><a name="[192]"></a>SPI_Master_SetReadLen</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetReadLen
</UL>

<P><STRONG><a name="[194]"></a>SPI_Master_JDI_SetReadLen</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetReadLen
</UL>

<P><STRONG><a name="[195]"></a>SPI_SetReadLen</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_SetReadLen
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_SetReadLen
</UL>

<P><STRONG><a name="[196]"></a>SPI_Master_SetCSNumber</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
</UL>

<P><STRONG><a name="[198]"></a>SPI_Master_JDI_SetCSNumber</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
</UL>

<P><STRONG><a name="[332]"></a>SPI_SetCSNumber</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)

<P><STRONG><a name="[333]"></a>SPI_Master_GetINTStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>SPI_Master_JDI_GetINTStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetINTStatus
</UL>

<P><STRONG><a name="[334]"></a>SPI_Slave_GetINTStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>SPI_GetINTStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_GetINTStatus
</UL>

<P><STRONG><a name="[19d]"></a>SPI_Master_INTConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_INTConfig
</UL>

<P><STRONG><a name="[19c]"></a>SPI_Master_JDI_INTConfig</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_INTConfig
</UL>

<P><STRONG><a name="[19e]"></a>SPI_Slave_INTConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_INTConfig
</UL>

<P><STRONG><a name="[19b]"></a>SPI_INTConfig</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Slave_INTConfig
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_INTConfig
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_INTConfig
</UL>

<P><STRONG><a name="[335]"></a>SPI_Master_GetFlagState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>SPI_Master_JDI_GetFlagState</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagState
</UL>

<P><STRONG><a name="[336]"></a>SPI_Slave_GetFlagState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>SPI_GetFlagState</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_GetFlagState
</UL>

<P><STRONG><a name="[1a3]"></a>SPI_Master_GDMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GDMACmd
</UL>

<P><STRONG><a name="[1a2]"></a>SPI_Master_JDI_GDMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GDMACmd
</UL>

<P><STRONG><a name="[1a4]"></a>SPI_Slave_GDMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GDMACmd
</UL>

<P><STRONG><a name="[1a1]"></a>SPI_GDMACmd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Slave_GDMACmd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_GDMACmd
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_GDMACmd
</UL>

<P><STRONG><a name="[1a5]"></a>SPI_Master_ChangeClock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ChangeClock
</UL>

<P><STRONG><a name="[1a7]"></a>SPI_Master_JDI_ChangeClock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ChangeClock
</UL>

<P><STRONG><a name="[1a8]"></a>SPI_ChangeClock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_ChangeClock
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_ChangeClock
</UL>

<P><STRONG><a name="[1a9]"></a>SPI_Master_SetRxSampleDly</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetRxSampleDly
</UL>

<P><STRONG><a name="[1ab]"></a>SPI_Master_JDI_SetRxSampleDly</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetRxSampleDly
</UL>

<P><STRONG><a name="[1ac]"></a>SPI_SetRxSampleDly</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_SetRxSampleDly
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_SetRxSampleDly
</UL>

<P><STRONG><a name="[1ad]"></a>SPI_WrapModeStartTx</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
</UL>

<P><STRONG><a name="[1af]"></a>SPI_InverseCSActivePolarity</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
</UL>

<P><STRONG><a name="[1b0]"></a>SPI_DriveMOSILow</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
</UL>

<P><STRONG><a name="[1b1]"></a>SPI_PullMOSIEn</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
</UL>

<P><STRONG><a name="[172]"></a>SPI_SPI1AHBBridgeConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_spi_int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_Init
</UL>

<P><STRONG><a name="[16d]"></a>SPI_ConfigAPHBridge</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rtl876x_spi_int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_Init
</UL>

<P><STRONG><a name="[337]"></a>SPI_ClkSourceSwitch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtl876x_spi_int.o(.text), UNUSED)

<P><STRONG><a name="[338]"></a>SPI_ClkDivConfig</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, rtl876x_spi_int.o(.text), UNUSED)

<P><STRONG><a name="[339]"></a>SleepLed_GetControlRegister</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_sleep_led.o(.text), UNUSED)

<P><STRONG><a name="[33a]"></a>SleepLed_RegisterWrite</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtl876x_sleep_led.o(.text), UNUSED)

<P><STRONG><a name="[33b]"></a>SleepLed_RegisterRead</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_sleep_led.o(.text), UNUSED)

<P><STRONG><a name="[33c]"></a>SleepLed_Reset</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rtl876x_sleep_led.o(.text), UNUSED)

<P><STRONG><a name="[33d]"></a>SleepLed_DeInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rtl876x_sleep_led.o(.text), UNUSED)

<P><STRONG><a name="[33e]"></a>SleepLed_Init</STRONG> (Thumb, 204 bytes, Stack size 28 bytes, rtl876x_sleep_led.o(.text), UNUSED)

<P><STRONG><a name="[33f]"></a>SleepLed_StructInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rtl876x_sleep_led.o(.text), UNUSED)

<P><STRONG><a name="[340]"></a>SleepLed_Cmd</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rtl876x_sleep_led.o(.text), UNUSED)

<P><STRONG><a name="[341]"></a>SleepLed_SetIdleMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rtl876x_sleep_led.o(.text), UNUSED)

<P><STRONG><a name="[342]"></a>GPIO_GetPort</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtl876x_gpio_int.o(.text), UNUSED)

<P><STRONG><a name="[343]"></a>GPIO_GetPinBit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtl876x_gpio_int.o(.text), UNUSED)

<P><STRONG><a name="[344]"></a>GPIO_GetNum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtl876x_gpio_int.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>GPIO_ExtDebCmd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtl876x_gpio_int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[124]"></a>GPIO_ExtDebUpdate</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, rtl876x_gpio_int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[122]"></a>GPIO_ExtPolarity</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_gpio_int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPolarity
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[345]"></a>delay_us_internal</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[346]"></a>ISO7816_DelayCycle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[347]"></a>ISO7816_DeInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>ISO7816_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[349]"></a>ISO7816_StructInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[34a]"></a>ISO7816_INTConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[34b]"></a>ISO7816_SendData</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[34c]"></a>ISO7816_ReceiveData</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[34d]"></a>ISO7816_CardActivtion</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[34e]"></a>ISO7816_CardColdReset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>ISO7816_CardWarmReset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[34f]"></a>ISO7816_CardClockStop</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[350]"></a>ISO7816_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[351]"></a>ISO7816_CardClockRestart</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[352]"></a>ISO7816_CardDeactive</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[353]"></a>ISO7816_GetINTStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[354]"></a>ISO7816_GetErrStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>ISO7816_ClearErrStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[355]"></a>ISO7816_SendByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[356]"></a>ISO7816_ReceiveByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[357]"></a>ISO7816_ClearTxFIFO</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[358]"></a>ISO7816_ClearRxFIFO</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[359]"></a>ISO7816_GPCounterRestart</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>ISO7816_GPCounterSet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[35a]"></a>ISO7816_GPCounterEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[35b]"></a>ISO7816_GPCounterDisable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>ISO7816_SetRST</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[35c]"></a>ISO7816_ProtocolTypeConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[35d]"></a>ISO7816_ClockPolarConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>ISO7816_ConventionConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>ISO7816_SetSpeed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>ISO7816_SetGT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>ISO7816_SetWT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[1b9]"></a>_system_init_</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _system_init_ &rArr; log_uart_hw_init &rArr; UART_ComputeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_hw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[361]"></a>irq_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>main</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528 + Unknown Stack Size
<LI>Call Chain = main &rArr; CODA_Test &rArr; JPU_DecStartOneFrame &rArr; JpegDecodeHeader &rArr; wraparound_bistream_data &rArr; jpg_malloc &rArr; tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_tlsf_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_system_init_
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1bd]"></a>app_send_msg_to_apptask</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_send_msg_to_apptask &rArr; xQueueGenericSend &rArr; OUTLINED_FUNCTION_0 &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_timer_cb
</UL>

<P><STRONG><a name="[10]"></a>test_timer_cb</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = test_timer_cb &rArr; app_send_msg_to_apptask &rArr; xQueueGenericSend &rArr; OUTLINED_FUNCTION_0 &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_msg_to_apptask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.text)
</UL>
<P><STRONG><a name="[1be]"></a>sw_timer_init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, app_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>

<P><STRONG><a name="[11]"></a>app_main_task</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = app_main_task &rArr; xQueueReceive &rArr; OUTLINED_FUNCTION_0 &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.text)
</UL>
<P><STRONG><a name="[1bf]"></a>task_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, app_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1c0]"></a>jdi_probe</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, jdi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_release
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_init
</UL>

<P><STRONG><a name="[1c1]"></a>jdi_init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, jdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = jdi_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_heap_get_mem
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_probe
</UL>

<P><STRONG><a name="[232]"></a>jdi_set_clock_gate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, jdi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgSetClockGate
</UL>

<P><STRONG><a name="[1c2]"></a>jdi_release</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, jdi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DeInit
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_probe
</UL>

<P><STRONG><a name="[1c4]"></a>jdi_get_instance_pool</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, jdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearJpgPendingInst
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpgPendingInst
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitJpgInstancePool
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_GetOpenInstanceNum
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_IsInit
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_GetVersionInfo
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_Init
</UL>

<P><STRONG><a name="[217]"></a>jdi_open_instance</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, jdi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpgInstance
</UL>

<P><STRONG><a name="[218]"></a>jdi_close_instance</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, jdi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeJpgInstance
</UL>

<P><STRONG><a name="[362]"></a>jdi_get_instance_num</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, jdi.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>jdi_hw_reset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, jdi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_HWReset
</UL>

<P><STRONG><a name="[231]"></a>jdi_lock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, jdi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgEnterLock
</UL>

<P><STRONG><a name="[233]"></a>jdi_unlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jdi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgLeaveLock
</UL>

<P><STRONG><a name="[13]"></a>jdi_write_register</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, jdi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncGiveCommand
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncGetOutputInfo
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncSetWrPtr
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncIssueStop
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncClose
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncOpen
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgDecQMatTabSetUp
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgDecHuffTabSetUp
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecSetRdPtrEx
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecSetRdPtr
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecIssueStop
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecUpdateBitstreamBuffer
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecGetOutputInfo
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_ClrStatus
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecStartOneFrame
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_SWReset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test_write
</UL>
<BR>[Address Reference Count : 2]<UL><LI> jpuapi.o(.text)
<LI> jpuapifunc_rt.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>jdi_read_register</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, jdi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncGetOutputInfo
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncCompleteStop
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncGetBitstreamBuffer
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgDecGramSetup
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecUpdateBitstreamBuffer
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecGetBitstreamBuffer
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_IsBusy
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_GetStatus
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecGetOutputInfo
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecCompleteStop
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_WaitInterrupt
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecStartOneFrame
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_SWReset
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_GetVersionInfo
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecOpen
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jpuapi.o(.text)
</UL>
<P><STRONG><a name="[1c5]"></a>jdi_write_memory</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, jdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = jdi_write_memory &rArr; jpu_swap_endian
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpu_swap_endian
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wraparound_bistream_data
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteJpgBsBufHelper
</UL>

<P><STRONG><a name="[1c7]"></a>jdi_read_memory</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, jdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = jdi_read_memory &rArr; jpu_swap_endian
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpu_swap_endian
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreYuvImageBurstFormat
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wraparound_bistream_data
</UL>

<P><STRONG><a name="[1c8]"></a>jdi_allocate_dma_memory</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, jdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = jdi_allocate_dma_memory &rArr; jpg_malloc &rArr; tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateFrameBuffer
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1ca]"></a>jdi_free_dma_memory</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, jdi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeFrameBuffer
</UL>

<P><STRONG><a name="[363]"></a>jdi_get_clock_gate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, jdi.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>jdi_wait_interrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, jdi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_WaitInterrupt
</UL>

<P><STRONG><a name="[208]"></a>jdi_log</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, jdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = jdi_log
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncGetOutputInfo
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecGetOutputInfo
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecStartOneFrame
</UL>

<P><STRONG><a name="[1cc]"></a>RCC_MJPEG_Config_Enable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, jpeg_decoder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_MJPEG_Config_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[364]"></a>RCC_MJPEG_Config_Disable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, jpeg_decoder.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>CODA_Test_read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, jpeg_decoder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CODA_Test_read
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test_write
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1cf]"></a>CODA_Test_write</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, jpeg_decoder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CODA_Test_write &rArr; CODA_Test_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test_read
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1bc]"></a>CODA_Test</STRONG> (Thumb, 2236 bytes, Stack size 1280 bytes, jpeg_decoder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = CODA_Test &rArr; JPU_DecStartOneFrame &rArr; JpegDecodeHeader &rArr; wraparound_bistream_data &rArr; jpg_malloc &rArr; tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveYuvImageHelperFormat
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_GetStatus
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecGetOutputInfo
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecCompleteStop
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveYuvPartialImageHelperFormat
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFrameBuffer
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_ClrStatus
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_WaitInterrupt
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecStartOneFrame
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_SWReset
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecRegisterFrameBuffer
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgLeaveLock
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearFrameBuffer
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameBuffer
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgEnterLock
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateFrameBuffer
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameBufSize
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecGiveCommand
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DeInit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecClose
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecGetInitialInfo
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteJpgBsBufHelper
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_GetVersionInfo
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecOpen
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_Init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test_write
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test_read
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MJPEG_Config_Enable
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_free
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_allocate_dma_memory
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_heap_get_mem
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ea]"></a>JPU_IsBusy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, jpuapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_read_register
</UL>

<P><STRONG><a name="[1e3]"></a>JPU_ClrStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, jpuapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1e8]"></a>JPU_GetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, jpuapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1eb]"></a>JPU_IsInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, jpuapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_get_instance_pool
</UL>

<P><STRONG><a name="[1e2]"></a>JPU_WaitInterrupt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, jpuapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = JPU_WaitInterrupt &rArr; OUTLINED_FUNCTION_6 &rArr; JpgSetClockGate &rArr; OUTLINED_FUNCTION_12 &rArr; jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_wait_interrupt
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1ef]"></a>JPU_GetOpenInstanceNum</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, jpuapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_get_instance_pool
</UL>

<P><STRONG><a name="[1d0]"></a>JPU_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, jpuapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = JPU_Init &rArr; JPU_SWReset &rArr; JpgLeaveLock &rArr; JpgSetClockGate &rArr; OUTLINED_FUNCTION_12 &rArr; jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitJpgInstancePool
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_SWReset
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_get_instance_pool
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1d7]"></a>JPU_DeInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, jpuapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1d3]"></a>JPU_GetVersionInfo</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, jpuapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = JPU_GetVersionInfo &rArr; JpgLeaveLock &rArr; JpgSetClockGate &rArr; OUTLINED_FUNCTION_12 &rArr; jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgLeaveLock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgEnterLock
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_read_register
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_get_instance_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1d1]"></a>JPU_DecOpen</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, jpuapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = JPU_DecOpen &rArr; JpgLeaveLock &rArr; JpgSetClockGate &rArr; OUTLINED_FUNCTION_12 &rArr; jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpgInstance
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckJpgDecOpenParam
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgLeaveLock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgEnterLock
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_read_register
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1d6]"></a>JPU_DecClose</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, jpuapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = JPU_DecClose &rArr; JpgLeaveLock &rArr; JpgSetClockGate &rArr; OUTLINED_FUNCTION_12 &rArr; jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeJpgInstance
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgLeaveLock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgEnterLock
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1d5]"></a>JPU_DecGetInitialInfo</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, jpuapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = JPU_DecGetInitialInfo &rArr; JpegDecodeHeader &rArr; wraparound_bistream_data &rArr; jpg_malloc &rArr; tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecodeHeader
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1de]"></a>JPU_DecRegisterFrameBuffer</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, jpuapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = JPU_DecRegisterFrameBuffer &rArr; CheckJpgInstValidity &rArr; OUTLINED_FUNCTION_12 &rArr; jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckJpgInstValidity
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1f8]"></a>JPU_DecGetBitstreamBuffer</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, jpuapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = JPU_DecGetBitstreamBuffer &rArr; GetJpgPendingInst &rArr; jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpgPendingInst
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckJpgInstValidity
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteJpgBsBufHelper
</UL>

<P><STRONG><a name="[1fa]"></a>JPU_DecUpdateBitstreamBuffer</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, jpuapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = JPU_DecUpdateBitstreamBuffer &rArr; JpgSetClockGate &rArr; OUTLINED_FUNCTION_12 &rArr; jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgSetClockGate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpgPendingInst
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_read_register
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteJpgBsBufHelper
</UL>

<P><STRONG><a name="[1df]"></a>JPU_SWReset</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, jpuapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = JPU_SWReset &rArr; JpgLeaveLock &rArr; JpgSetClockGate &rArr; OUTLINED_FUNCTION_12 &rArr; jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgLeaveLock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgEnterLock
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_read_register
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1fc]"></a>JPU_HWReset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, jpuapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_hw_reset
</UL>

<P><STRONG><a name="[1fe]"></a>JPU_DecIssueStop</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, jpuapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgSetClockGate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpgPendingInst
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_register
</UL>

<P><STRONG><a name="[1e6]"></a>JPU_DecCompleteStop</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, jpuapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = JPU_DecCompleteStop &rArr; SetJpgPendingInst &rArr; OUTLINED_FUNCTION_12 &rArr; jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetJpgPendingInst
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpgPendingInst
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[200]"></a>JPU_DecSetRdPtr</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, jpuapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpgPendingInst
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgLeaveLock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgEnterLock
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_register
</UL>

<P><STRONG><a name="[201]"></a>JPU_DecSetRdPtrEx</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, jpuapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpgPendingInst
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgLeaveLock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgEnterLock
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_register
</UL>

<P><STRONG><a name="[1e0]"></a>JPU_DecStartOneFrame</STRONG> (Thumb, 1192 bytes, Stack size 40 bytes, jpuapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = JPU_DecStartOneFrame &rArr; JpegDecodeHeader &rArr; wraparound_bistream_data &rArr; jpg_malloc &rArr; tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgDecGramSetup
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgDecQMatTabSetUp
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgDecHuffTabSetUp
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetJpgPendingInst
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpgPendingInst
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecodeHeader
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgLeaveLock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgEnterLock
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_log
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_read_register
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1e7]"></a>JPU_DecGetOutputInfo</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, jpuapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = JPU_DecGetOutputInfo &rArr; jdi_log
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetJpgPendingInst
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpgPendingInst
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgLeaveLock
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_log
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_read_register
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[12]"></a>JPU_DecGiveCommand</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, jpuapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = JPU_DecGiveCommand &rArr; OUTLINED_FUNCTION_3 &rArr; CheckJpgInstValidity &rArr; OUTLINED_FUNCTION_12 &rArr; jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jpeg_decoder.o(.text)
</UL>
<P><STRONG><a name="[20a]"></a>JPU_EncOpen</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, jpuapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpgInstance
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgLeaveLock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgEnterLock
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_register
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[20c]"></a>JPU_EncClose</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, jpuapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpgPendingInst
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeJpgInstance
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgLeaveLock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgEnterLock
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_register
</UL>

<P><STRONG><a name="[20d]"></a>JPU_EncGetInitialInfo</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, jpuapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpgPendingInst
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgLeaveLock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgEnterLock
</UL>

<P><STRONG><a name="[20e]"></a>JPU_EncGetBitstreamBuffer</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, jpuapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpgPendingInst
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckJpgInstValidity
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_read_register
</UL>

<P><STRONG><a name="[20f]"></a>JPU_EncUpdateBitstreamBuffer</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, jpuapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpgPendingInst
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[210]"></a>JPU_EncIssueStop</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, jpuapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgSetClockGate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpgPendingInst
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_register
</UL>

<P><STRONG><a name="[211]"></a>JPU_EncCompleteStop</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, jpuapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetJpgPendingInst
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpgPendingInst
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_read_register
</UL>

<P><STRONG><a name="[212]"></a>JPU_EncSetWrPtr</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, jpuapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpgPendingInst
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgLeaveLock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgEnterLock
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_register
</UL>

<P><STRONG><a name="[213]"></a>JPU_EncStartOneFrame</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, jpuapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpgPendingInst
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgLeaveLock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgEnterLock
</UL>

<P><STRONG><a name="[214]"></a>JPU_EncGetOutputInfo</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, jpuapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetJpgPendingInst
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpgPendingInst
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgLeaveLock
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_log
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_read_register
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_register
</UL>

<P><STRONG><a name="[215]"></a>JPU_EncGiveCommand</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, jpuapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_register
</UL>

<P><STRONG><a name="[1f0]"></a>InitJpgInstancePool</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = InitJpgInstancePool &rArr; jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_get_instance_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_Init
</UL>

<P><STRONG><a name="[1f2]"></a>GetJpgInstance</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GetJpgInstance &rArr; OUTLINED_FUNCTION_12 &rArr; jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_open_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncOpen
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecOpen
</UL>

<P><STRONG><a name="[1f5]"></a>FreeJpgInstance</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_close_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncClose
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecClose
</UL>

<P><STRONG><a name="[1f7]"></a>CheckJpgInstValidity</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = CheckJpgInstValidity &rArr; OUTLINED_FUNCTION_12 &rArr; jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncGetBitstreamBuffer
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecGetBitstreamBuffer
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecRegisterFrameBuffer
</UL>

<P><STRONG><a name="[1f1]"></a>CheckJpgDecOpenParam</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecOpen
</UL>

<P><STRONG><a name="[203]"></a>JpgDecHuffTabSetUp</STRONG> (Thumb, 560 bytes, Stack size 32 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = JpgDecHuffTabSetUp
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecStartOneFrame
</UL>

<P><STRONG><a name="[204]"></a>JpgDecQMatTabSetUp</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = JpgDecQMatTabSetUp
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecStartOneFrame
</UL>

<P><STRONG><a name="[205]"></a>JpgDecGramSetup</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = JpgDecGramSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecStartOneFrame
</UL>

<P><STRONG><a name="[229]"></a>check_start_code</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_dth_header
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_dqt_header
</UL>

<P><STRONG><a name="[221]"></a>JpuGguShowBit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_start_soi_code
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_start_code
</UL>

<P><STRONG><a name="[21f]"></a>find_start_code</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = find_start_code
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpuGguShowBit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecodeHeader
</UL>

<P><STRONG><a name="[365]"></a>JpuGbuGetLeftBitCount</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, jpuapifunc_rt.o(.text), UNUSED)

<P><STRONG><a name="[15]"></a>JpuGbuGetBit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_sos_header
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_sof_header
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_dri_header
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecodeHeader
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jpuapifunc_rt.o(.text)
</UL>
<P><STRONG><a name="[223]"></a>find_start_soi_code</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = find_start_soi_code
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpuGguShowBit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecodeHeader
</UL>

<P><STRONG><a name="[224]"></a>decode_app_header</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = decode_app_header
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecodeHeader
</UL>

<P><STRONG><a name="[227]"></a>decode_dri_header</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = decode_dri_header
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpuGbuGetBit
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecodeHeader
</UL>

<P><STRONG><a name="[228]"></a>decode_dqt_header</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = decode_dqt_header
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_start_code
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecodeHeader
</UL>

<P><STRONG><a name="[22a]"></a>decode_dth_header</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = decode_dth_header
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_start_code
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecodeHeader
</UL>

<P><STRONG><a name="[22b]"></a>decode_sof_header</STRONG> (Thumb, 264 bytes, Stack size 72 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = decode_sof_header
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpuGbuGetBit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecodeHeader
</UL>

<P><STRONG><a name="[22c]"></a>decode_sos_header</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = decode_sos_header
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpuGbuGetBit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecodeHeader
</UL>

<P><STRONG><a name="[366]"></a>JpuGbuGetUsedBitCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jpuapifunc_rt.o(.text), UNUSED)

<P><STRONG><a name="[367]"></a>JpuGbuInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, jpuapifunc_rt.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>JpegDecodeHeader</STRONG> (Thumb, 1040 bytes, Stack size 40 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = JpegDecodeHeader &rArr; wraparound_bistream_data &rArr; jpg_malloc &rArr; tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_sos_header
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_sof_header
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_dth_header
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_dqt_header
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_dri_header
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_app_header
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_start_soi_code
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpuGbuGetBit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_start_code
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wraparound_bistream_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecStartOneFrame
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecGetInitialInfo
</UL>

<P><STRONG><a name="[1da]"></a>JpgEnterLock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = JpgEnterLock &rArr; JpgSetClockGate &rArr; OUTLINED_FUNCTION_12 &rArr; jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgSetClockGate
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncStartOneFrame
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncSetWrPtr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncGetInitialInfo
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncClose
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncOpen
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecSetRdPtrEx
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecSetRdPtr
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecStartOneFrame
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_SWReset
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecClose
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_GetVersionInfo
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecOpen
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1fb]"></a>JpgSetClockGate</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = JpgSetClockGate &rArr; OUTLINED_FUNCTION_12 &rArr; jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_set_clock_gate
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncIssueStop
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecIssueStop
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecUpdateBitstreamBuffer
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgLeaveLock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgEnterLock
</UL>

<P><STRONG><a name="[1dd]"></a>JpgLeaveLock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = JpgLeaveLock &rArr; JpgSetClockGate &rArr; OUTLINED_FUNCTION_12 &rArr; jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgSetClockGate
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncGetOutputInfo
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncStartOneFrame
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncSetWrPtr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncGetInitialInfo
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncClose
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncOpen
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecSetRdPtrEx
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecSetRdPtr
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecGetOutputInfo
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecStartOneFrame
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_SWReset
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecClose
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_GetVersionInfo
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecOpen
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1ff]"></a>SetJpgPendingInst</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SetJpgPendingInst &rArr; OUTLINED_FUNCTION_12 &rArr; jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncGetOutputInfo
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncCompleteStop
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecGetOutputInfo
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecCompleteStop
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecStartOneFrame
</UL>

<P><STRONG><a name="[234]"></a>ClearJpgPendingInst</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, jpuapifunc_rt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_get_instance_pool
</UL>

<P><STRONG><a name="[1f9]"></a>GetJpgPendingInst</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GetJpgPendingInst &rArr; jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_get_instance_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncGetOutputInfo
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncStartOneFrame
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncSetWrPtr
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncCompleteStop
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncIssueStop
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncUpdateBitstreamBuffer
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncGetBitstreamBuffer
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncGetInitialInfo
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncClose
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecSetRdPtrEx
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecSetRdPtr
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecIssueStop
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecUpdateBitstreamBuffer
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecGetBitstreamBuffer
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecGetOutputInfo
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecCompleteStop
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecStartOneFrame
</UL>

<P><STRONG><a name="[1d4]"></a>WriteJpgBsBufHelper</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, jpuhelper_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = WriteJpgBsBufHelper &rArr; jdi_write_memory &rArr; jpu_swap_endian
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecUpdateBitstreamBuffer
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecGetBitstreamBuffer
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1e9]"></a>SaveYuvImageHelperFormat</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, jpuhelper_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SaveYuvImageHelperFormat &rArr; StoreYuvImageBurstFormat &rArr; OUTLINED_FUNCTION_0 &rArr; jdi_read_memory &rArr; jpu_swap_endian
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreYuvImageBurstFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1e5]"></a>SaveYuvPartialImageHelperFormat</STRONG> (Thumb, 62 bytes, Stack size 56 bytes, jpuhelper_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SaveYuvPartialImageHelperFormat &rArr; StoreYuvImageBurstFormat &rArr; OUTLINED_FUNCTION_0 &rArr; jdi_read_memory &rArr; jpu_swap_endian
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreYuvImageBurstFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1d8]"></a>GetFrameBufSize</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, jpuhelper_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetFrameBufSize
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1d9]"></a>AllocateFrameBuffer</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, mixer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AllocateFrameBuffer &rArr; jdi_allocate_dma_memory &rArr; jpg_malloc &rArr; tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_allocate_dma_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[368]"></a>GetFrameBufBase</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mixer.o(.text), UNUSED)

<P><STRONG><a name="[369]"></a>GetFrameBufAllocSize</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mixer.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>GetFrameBuffer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mixer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[36a]"></a>getFramBuffyuv</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mixer.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>FindFrameBuffer</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, mixer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1dc]"></a>ClearFrameBuffer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mixer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[237]"></a>FreeFrameBuffer</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mixer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_free_dma_memory
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[36b]"></a>sw_mixer_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mixer.o(.text), UNUSED)

<P><STRONG><a name="[36c]"></a>sw_mixer_draw</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mixer.o(.text), UNUSED)

<P><STRONG><a name="[36d]"></a>sw_mixer_close</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mixer.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>jpeg_heap_get_mem</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, jpeg_heap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1ba]"></a>jpg_tlsf_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, jpeg_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = jpg_tlsf_init &rArr; tlsf_create_with_pool &rArr; tlsf_add_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_create_with_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c9]"></a>jpg_malloc</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, jpeg_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = jpg_malloc &rArr; tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wraparound_bistream_data
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_allocate_dma_memory
</UL>

<P><STRONG><a name="[1cb]"></a>jpg_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, jpeg_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = jpg_free &rArr; tlsf_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wraparound_bistream_data
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_free_dma_memory
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[23b]"></a>tlsf_check</STRONG> (Thumb, 412 bytes, Stack size 64 bytes, tlsf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[240]"></a>tlsf_walk_pool</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, tlsf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_check_pool
</UL>

<P><STRONG><a name="[36e]"></a>tlsf_block_size</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tlsf.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>tlsf_check_pool</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tlsf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_walk_pool
</UL>

<P><STRONG><a name="[36f]"></a>tlsf_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tlsf.o(.text), UNUSED)

<P><STRONG><a name="[370]"></a>tlsf_align_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlsf.o(.text), UNUSED)

<P><STRONG><a name="[371]"></a>tlsf_block_size_min</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlsf.o(.text), UNUSED)

<P><STRONG><a name="[372]"></a>tlsf_block_size_max</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tlsf.o(.text), UNUSED)

<P><STRONG><a name="[373]"></a>tlsf_pool_overhead</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlsf.o(.text), UNUSED)

<P><STRONG><a name="[374]"></a>tlsf_alloc_overhead</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlsf.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>tlsf_add_pool</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tlsf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tlsf_add_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_create_with_pool
</UL>

<P><STRONG><a name="[246]"></a>tlsf_remove_pool</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tlsf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[248]"></a>tlsf_create</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tlsf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tlsf_create &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_create_with_pool
</UL>

<P><STRONG><a name="[238]"></a>tlsf_create_with_pool</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tlsf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tlsf_create_with_pool &rArr; tlsf_add_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_create
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_add_pool
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_tlsf_init
</UL>

<P><STRONG><a name="[375]"></a>tlsf_destroy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tlsf.o(.text), UNUSED)

<P><STRONG><a name="[376]"></a>tlsf_get_pool</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tlsf.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>tlsf_malloc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tlsf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_realloc
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_malloc
</UL>

<P><STRONG><a name="[24e]"></a>tlsf_memalign</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, tlsf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_ptr
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[23a]"></a>tlsf_free</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tlsf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tlsf_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_realloc
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_free
</UL>

<P><STRONG><a name="[254]"></a>tlsf_realloc</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, tlsf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_free
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_malloc
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[10f]"></a>vsnprintf</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_print
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct_rom
</UL>

<P><STRONG><a name="[241]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_create
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_add_pool
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_walker
</UL>

<P><STRONG><a name="[257]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[cd]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[25d]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[d3]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[db]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[c5]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[25e]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_realloc
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wraparound_bistream_data
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_read_memory
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_memory
</UL>

<P><STRONG><a name="[261]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[377]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncOpen
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[378]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wraparound_bistream_data
</UL>

<P><STRONG><a name="[37b]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_print
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeFrameBuffer
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncOpen
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecOpen
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_get_instance_pool
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[37c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[37d]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[258]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[259]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[25a]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[25b]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[25c]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c3]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[255]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[18]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[264]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[dd]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[df]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[256]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[266]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[d5]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[269]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[d1]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[d9]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[268]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[26f]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[272]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[273]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[e1]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[e3]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[265]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[ee]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[f0]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[279]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[267]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[27a]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[e9]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[278]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[271]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[26b]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[27c]"></a>__flsbuf</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
</UL>

<P><STRONG><a name="[29d]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[37e]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[274]"></a>freopen</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[285]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[277]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[37f]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[275]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[283]"></a>_sys_open</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_open &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[287]"></a>_sys_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[293]"></a>_sys_write</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[380]"></a>_sys_read</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[280]"></a>_sys_istty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[292]"></a>_sys_seek</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[381]"></a>_sys_ensure</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>_sys_flen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[27b]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[382]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[383]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[384]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[385]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[28e]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[e7]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[281]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[284]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[386]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[282]"></a>_writebuf</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[286]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[27d]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[28a]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[289]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[29e]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv8m_maindsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[f9]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[387]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[388]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[290]"></a>__Heap_Initialize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[389]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[38a]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[38b]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[291]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[38c]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[294]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[28f]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[28b]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[296]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[295]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[38d]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[38e]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[297]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[26c]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[299]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[298]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[29a]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[29b]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[26d]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[26e]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[29c]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[270]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[25f]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1a]"></a>fputc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[ec]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[1b]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[38f]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[390]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[c7]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[cb]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[49]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[51]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[52]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[54]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[55]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[56]"></a>prvCopyDataToQueue</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[57]"></a>prvNotifyQueueSetContainer</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[58]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[5b]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; prvIsQueueEmpty &rArr; OUTLINED_FUNCTION_2 &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[62]"></a>prvUnlockQueue</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[67]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[68]"></a>prvIsQueueEmpty</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty &rArr; OUTLINED_FUNCTION_2 &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[7e]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[7f]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
</UL>

<P><STRONG><a name="[80]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
</UL>

<P><STRONG><a name="[82]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[83]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[84]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
</UL>

<P><STRONG><a name="[86]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[88]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[89]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[90]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
</UL>

<P><STRONG><a name="[94]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>

<P><STRONG><a name="[95]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>

<P><STRONG><a name="[97]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
</UL>

<P><STRONG><a name="[98]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
</UL>

<P><STRONG><a name="[6]"></a>prvIdleTask</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[7]"></a>prvTimerTask</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvTimerTask &rArr; prvSampleTimeNow &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; OUTLINED_FUNCTION_0 &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>prvSampleTimeNow</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvSampleTimeNow &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; OUTLINED_FUNCTION_0 &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[a9]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[fb]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[a]"></a>vSenderTask</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, freertos_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vSenderTask &rArr; xQueueGenericSend &rArr; OUTLINED_FUNCTION_0 &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_test.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>vReceiverTask</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, freertos_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vReceiverTask &rArr; xQueueReceive &rArr; OUTLINED_FUNCTION_0 &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; OUTLINED_FUNCTION_4 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_test.o(.text)
</UL>
<P><STRONG><a name="[fd]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, freertos_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vReceiverTask
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSenderTask
</UL>

<P><STRONG><a name="[8]"></a>prvTaskExitError</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartSchedulerInRestore
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[106]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bb2plus_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Timer_DelayMs
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Timer_DelayUs
</UL>

<P><STRONG><a name="[115]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtl876x_gdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_Init_rom
</UL>

<P><STRONG><a name="[119]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtl876x_gdma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_GetFIFOStatus
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_GetSuspendCmdStatus
</UL>

<P><STRONG><a name="[11c]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_gdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_GetGDMAChannelNum
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_GetChannelStatus
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_ClearAllTypeINT
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDMA_GetTransferINTStatus
</UL>

<P><STRONG><a name="[126]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPadStatus
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetINTStatus
</UL>

<P><STRONG><a name="[12b]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HwClock
</UL>

<P><STRONG><a name="[12c]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HwClock
</UL>

<P><STRONG><a name="[131]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtl876x_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearRxFIFO
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearTxFIFO
</UL>

<P><STRONG><a name="[137]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtl876x_pinmux.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_ConfigExt_rom
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config_rom
</UL>

<P><STRONG><a name="[138]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtl876x_pinmux.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_ConfigExt_rom
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config_rom
</UL>

<P><STRONG><a name="[139]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_pinmux.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_ConfigExt_rom
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config_rom
</UL>

<P><STRONG><a name="[13c]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtl876x_pinmux.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_ClearAllWakeupINT
</UL>

<P><STRONG><a name="[142]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtl876x_pinmux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_GetModeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_GetOutputCtrl
</UL>

<P><STRONG><a name="[145]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, indirect_access.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe_8b
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
</UL>

<P><STRONG><a name="[148]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, indirect_access.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_update_safe_8b
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_update_8b
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_update_safe
</UL>

<P><STRONG><a name="[14e]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, platform_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aon_indirect_read_reg_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_rtc_nmi_enable
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_rtc_system_wakeup_config
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_rtc_run_cmd
</UL>

<P><STRONG><a name="[15e]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_tim_int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClkConfig
</UL>

<P><STRONG><a name="[15f]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtl876x_tim_int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMDZClockConfig
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClkConfig
</UL>

<P><STRONG><a name="[160]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtl876x_tim_int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_LatchTrigDebClkConfig
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClkConfig
</UL>

<P><STRONG><a name="[16c]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_Init
</UL>

<P><STRONG><a name="[16e]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_Init
</UL>

<P><STRONG><a name="[16f]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_Init
</UL>

<P><STRONG><a name="[170]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_Init
</UL>

<P><STRONG><a name="[176]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Slave_Cmd
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_Cmd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_Cmd
</UL>

<P><STRONG><a name="[17a]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Slave_SendBuffer
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_SendBuffer
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_SendBuffer
</UL>

<P><STRONG><a name="[17f]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Slave_SendHalfWord
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_SendHalfWord
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_SendHalfWord
</UL>

<P><STRONG><a name="[18f]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_ChangeDirection
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_ChangeDirection
</UL>

<P><STRONG><a name="[193]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_SetReadLen
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_SetReadLen
</UL>

<P><STRONG><a name="[197]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_SetCSNumber
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_SetCSNumber
</UL>

<P><STRONG><a name="[1a6]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_ChangeClock
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_ChangeClock
</UL>

<P><STRONG><a name="[1aa]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_JDI_SetRxSampleDly
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_SetRxSampleDly
</UL>

<P><STRONG><a name="[1ae]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtl876x_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PullMOSIEn
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DriveMOSILow
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_InverseCSActivePolarity
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WrapModeStartTx
</UL>

<P><STRONG><a name="[1b3]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_SetRST
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_CardWarmReset
</UL>

<P><STRONG><a name="[1b5]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_iso7816.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_SetWT
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_GPCounterSet
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_ClearErrStatus
</UL>

<P><STRONG><a name="[1bb]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c6]"></a>jpu_swap_endian</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, jdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpu_swap_endian
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_read_memory
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_memory
</UL>

<P><STRONG><a name="[1cd]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jpeg_decoder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MJPEG_Config_Enable
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1d2]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jpeg_decoder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1e1]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, jpeg_decoder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODA_Test
</UL>

<P><STRONG><a name="[1ed]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jpuapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; JpgSetClockGate &rArr; OUTLINED_FUNCTION_12 &rArr; jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgSetClockGate
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncCompleteStop
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncIssueStop
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncUpdateBitstreamBuffer
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncGetBitstreamBuffer
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecIssueStop
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecUpdateBitstreamBuffer
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecCompleteStop
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_WaitInterrupt
</UL>

<P><STRONG><a name="[1ee]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jpuapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; JpgSetClockGate &rArr; OUTLINED_FUNCTION_12 &rArr; jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgSetClockGate
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncCompleteStop
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncUpdateBitstreamBuffer
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncGetBitstreamBuffer
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecCompleteStop
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_WaitInterrupt
</UL>

<P><STRONG><a name="[1f3]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, jpuapi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecOpen
</UL>

<P><STRONG><a name="[1f4]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jpuapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; CheckJpgInstValidity &rArr; OUTLINED_FUNCTION_12 &rArr; jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckJpgInstValidity
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncSetWrPtr
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncCompleteStop
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncIssueStop
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncUpdateBitstreamBuffer
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecSetRdPtrEx
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecSetRdPtr
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecIssueStop
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecUpdateBitstreamBuffer
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecCompleteStop
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecClose
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecGetInitialInfo
</UL>

<P><STRONG><a name="[202]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jpuapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; CheckJpgInstValidity &rArr; OUTLINED_FUNCTION_12 &rArr; jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckJpgInstValidity
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncGiveCommand
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncGetOutputInfo
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncStartOneFrame
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncGetInitialInfo
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncClose
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecGetOutputInfo
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecStartOneFrame
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecGiveCommand
</UL>

<P><STRONG><a name="[206]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, jpuapi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecStartOneFrame
</UL>

<P><STRONG><a name="[207]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, jpuapi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecGetOutputInfo
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecStartOneFrame
</UL>

<P><STRONG><a name="[209]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jpuapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncGetOutputInfo
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_EncUpdateBitstreamBuffer
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPU_DecGetOutputInfo
</UL>

<P><STRONG><a name="[216]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_12 &rArr; jdi_get_instance_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_get_instance_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetJpgPendingInst
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgSetClockGate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckJpgInstValidity
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpgInstance
</UL>

<P><STRONG><a name="[219]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgDecQMatTabSetUp
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgDecHuffTabSetUp
</UL>

<P><STRONG><a name="[21a]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgDecHuffTabSetUp
</UL>

<P><STRONG><a name="[21b]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgDecHuffTabSetUp
</UL>

<P><STRONG><a name="[21c]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgDecHuffTabSetUp
</UL>

<P><STRONG><a name="[21d]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgDecHuffTabSetUp
</UL>

<P><STRONG><a name="[21e]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpgDecQMatTabSetUp
</UL>

<P><STRONG><a name="[220]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_dth_header
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_dqt_header
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_start_code
</UL>

<P><STRONG><a name="[222]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpuGbuGetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_sos_header
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_sof_header
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_dth_header
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_dqt_header
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_app_header
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_start_soi_code
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_start_code
</UL>

<P><STRONG><a name="[225]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_dth_header
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_dqt_header
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_app_header
</UL>

<P><STRONG><a name="[226]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpuGbuGetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_dth_header
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_dqt_header
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_dri_header
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_app_header
</UL>

<P><STRONG><a name="[22d]"></a>wraparound_bistream_data</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = wraparound_bistream_data &rArr; jpg_malloc &rArr; tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_free
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_malloc
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_read_memory
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_write_memory
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecodeHeader
</UL>

<P><STRONG><a name="[22e]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecodeHeader
</UL>

<P><STRONG><a name="[22f]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, jpuapifunc_rt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecodeHeader
</UL>

<P><STRONG><a name="[235]"></a>StoreYuvImageBurstFormat</STRONG> (Thumb, 468 bytes, Stack size 88 bytes, jpuhelper_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = StoreYuvImageBurstFormat &rArr; OUTLINED_FUNCTION_0 &rArr; jdi_read_memory &rArr; jpu_swap_endian
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_read_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveYuvImageHelperFormat
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveYuvPartialImageHelperFormat
</UL>

<P><STRONG><a name="[236]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jpuhelper_rt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; jdi_read_memory &rArr; jpu_swap_endian
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdi_read_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreYuvImageBurstFormat
</UL>

<P><STRONG><a name="[23c]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tlsf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_realloc
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_memalign
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_remove_pool
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_check
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_ptr
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integrity_walker
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_free
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_create_with_pool
</UL>

<P><STRONG><a name="[23d]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tlsf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_check
</UL>

<P><STRONG><a name="[23e]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tlsf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_remove_pool
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_check
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
</UL>

<P><STRONG><a name="[23f]"></a>block_next</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tlsf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_realloc
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_remove_pool
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_walk_pool
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[16]"></a>default_walker</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tlsf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = default_walker &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsf.o(.text)
</UL>
<P><STRONG><a name="[17]"></a>integrity_walker</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, tlsf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = integrity_walker
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsf.o(.text)
</UL>
<P><STRONG><a name="[244]"></a>block_insert</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, tlsf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = block_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_realloc
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_memalign
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_add_pool
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_free
</UL>

<P><STRONG><a name="[245]"></a>block_link_next</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tlsf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_memalign
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_add_pool
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
</UL>

<P><STRONG><a name="[247]"></a>remove_free_block</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, tlsf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_remove_pool
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
</UL>

<P><STRONG><a name="[249]"></a>block_locate_free</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, tlsf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = block_locate_free &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_memalign
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_malloc
</UL>

<P><STRONG><a name="[24a]"></a>block_prepare_used</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tlsf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_memalign
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_malloc
</UL>

<P><STRONG><a name="[24b]"></a>adjust_request_size</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tlsf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_memalign
</UL>

<P><STRONG><a name="[24c]"></a>block_split</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, tlsf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_realloc
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_memalign
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
</UL>

<P><STRONG><a name="[24d]"></a>block_mark_as_used</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tlsf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = block_mark_as_used &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_realloc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
</UL>

<P><STRONG><a name="[24f]"></a>align_ptr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tlsf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_memalign
</UL>

<P><STRONG><a name="[250]"></a>block_mark_as_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tlsf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = block_mark_as_free &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_free
</UL>

<P><STRONG><a name="[251]"></a>block_remove</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tlsf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_free
</UL>

<P><STRONG><a name="[252]"></a>block_absorb</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tlsf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = block_absorb &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_free
</UL>

<P><STRONG><a name="[253]"></a>block_merge_next</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tlsf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_realloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_free
</UL>

<P><STRONG><a name="[19]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[26a]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
