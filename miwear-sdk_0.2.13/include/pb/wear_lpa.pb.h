/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.6 at Fri Jun 10 15:10:20 2022. */

#ifndef PB_WEAR_LPA_PB_H_INCLUDED
#define PB_WEAR_LPA_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _Lpa_LpaID
{
    Lpa_LpaID_COMMAND = 0
} Lpa_LpaID;
#define _Lpa_LpaID_MIN Lpa_LpaID_COMMAND
#define _Lpa_LpaID_MAX Lpa_LpaID_COMMAND
#define _Lpa_LpaID_ARRAYSIZE ((Lpa_LpaID)(Lpa_LpaID_COMMAND+1))

/* Struct definitions */
typedef struct _Lpa
{
    pb_size_t which_payload;
    union
    {
        char *data;
    } payload;
    /* @@protoc_insertion_point(struct:Lpa) */
} Lpa;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Lpa_init_default                         {0, {NULL}}
#define Lpa_init_zero                            {0, {NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define Lpa_data_tag                             1

/* Struct field encoding specification for nanopb */
extern const pb_field_t Lpa_fields[2];

/* Maximum encoded size of messages (where known) */
/* Lpa_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define WEAR_LPA_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
