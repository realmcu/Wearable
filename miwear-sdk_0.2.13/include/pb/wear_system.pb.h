/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.6 at Fri Jun 10 15:10:20 2022. */

#ifndef PB_WEAR_SYSTEM_PB_H_INCLUDED
#define PB_WEAR_SYSTEM_PB_H_INCLUDED
#include <pb.h>

#include "wear_common.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _ResetMode
{
    ResetMode_NO_ERASE = 0,
    ResetMode_ERASE_ALL = 1
} ResetMode;
#define _ResetMode_MIN ResetMode_NO_ERASE
#define _ResetMode_MAX ResetMode_ERASE_ALL
#define _ResetMode_ARRAYSIZE ((ResetMode)(ResetMode_ERASE_ALL+1))

typedef enum _FindMode
{
    FindMode_FIND_START = 0,
    FindMode_FIND_STOP = 1
} FindMode;
#define _FindMode_MIN FindMode_FIND_START
#define _FindMode_MAX FindMode_FIND_STOP
#define _FindMode_ARRAYSIZE ((FindMode)(FindMode_FIND_STOP+1))

typedef enum _TimingMode
{
    TimingMode_ALL_DAY_ON = 0,
    TimingMode_TIMED_ON = 1,
    TimingMode_ALL_DAY_OFF = 2
} TimingMode;
#define _TimingMode_MIN TimingMode_ALL_DAY_ON
#define _TimingMode_MAX TimingMode_ALL_DAY_OFF
#define _TimingMode_ARRAYSIZE ((TimingMode)(TimingMode_ALL_DAY_OFF+1))

typedef enum _Order
{
    Order_HEAD_RESIDENT = 0,
    Order_HIGHEST = 10,
    Order_LOWEST = 99,
    Order_RESIDENT = 100
} Order;
#define _Order_MIN Order_HEAD_RESIDENT
#define _Order_MAX Order_RESIDENT
#define _Order_ARRAYSIZE ((Order)(Order_RESIDENT+1))

typedef enum _System_SystemID
{
    System_SystemID_RESET = 0,
    System_SystemID_NOTIFY_NEW_BIND = 12,
    System_SystemID_GET_DEVICE_STATUS = 1,
    System_SystemID_GET_DEVICE_INFO = 2,
    System_SystemID_SET_SYSTEM_TIME = 3,
    System_SystemID_FORCE_UPGRADE = 4,
    System_SystemID_PREPARE_OTA = 5,
    System_SystemID_SET_LANGUAGE = 6,
    System_SystemID_GET_HID_STATUS = 7,
    System_SystemID_SET_HID_STATUS = 8,
    System_SystemID_GET_LOCK_SCREEN = 9,
    System_SystemID_SET_LOCK_SCREEN = 21,
    System_SystemID_GET_NIGHT_MODE = 10,
    System_SystemID_SET_NIGHT_MODE = 11,
    System_SystemID_UNLOCK_WATCH = 16,
    System_SystemID_FIND_PHONE = 17,
    System_SystemID_FIND_WEAR = 18,
    System_SystemID_GET_AUTHORIZE_UNLOCK = 19,
    System_SystemID_SET_AUTHORIZE_UNLOCK = 20,
    System_SystemID_GET_QUIET_MODE = 22,
    System_SystemID_SET_QUIET_MODE = 23,
    System_SystemID_GET_WRIST_SCREEN = 24,
    System_SystemID_SET_WRIST_SCREEN = 25,
    System_SystemID_SET_WIDGET = 26,
    System_SystemID_SET_WIDGET_LIST = 27,
    System_SystemID_GET_WIDGET_LIST = 28,
    System_SystemID_GET_ORDERED_APP_LIST = 29,
    System_SystemID_SET_ORDERED_APP_LIST = 30,
    System_SystemID_GET_APP_LAYOUT = 31,
    System_SystemID_SET_APP_LAYOUT = 41,
    System_SystemID_SET_SHORTCUT_1 = 32,
    System_SystemID_SET_SHORTCUT_2 = 33,
    System_SystemID_SET_SHORTCUT_3 = 34,
    System_SystemID_GET_SHORTCUT_1 = 35,
    System_SystemID_GET_SHORTCUT_2 = 36,
    System_SystemID_GET_SHORTCUT_3 = 37,
    System_SystemID_GET_SUPPORT_SHORTCUT_LIST = 38,
    System_SystemID_GET_SPORT_OPTION = 39,
    System_SystemID_SET_SPORT_OPTION = 40,
    System_SystemID_ADD_OR_UPDATE_SMALL_HABIT = 48,
    System_SystemID_SYNC_SMALL_HABIT = 49,
    System_SystemID_DELETE_SMALL_HABIT = 50,
    System_SystemID_GET_WIDGET_GROUP_LIST = 51,
    System_SystemID_SET_WIDGET_GROUP_LIST = 52,
    System_SystemID_GET_SUPPORT_WIDGET_LIST = 53,
    System_SystemID_GET_WIFI_CAPABILITY = 54,
    System_SystemID_REQUEST_WIFI_CONFIG = 55,
    System_SystemID_ADD_WIFI_CONFIG = 56,
    System_SystemID_SYNC_WIFI_CONFIG_LIST = 57,
    System_SystemID_GET_BASIC_STATUS = 78,
    System_SystemID_REPORT_BASIC_STATUS = 79,
    System_SystemID_REPORT_DATA = 80,
    System_SystemID_REPORT_DATA_RESULT = 81
} System_SystemID;
#define _System_SystemID_MIN System_SystemID_RESET
#define _System_SystemID_MAX System_SystemID_REPORT_DATA_RESULT
#define _System_SystemID_ARRAYSIZE ((System_SystemID)(System_SystemID_REPORT_DATA_RESULT+1))

typedef enum _DeviceStatus_Battery_ChargeStatus
{
    DeviceStatus_Battery_ChargeStatus_UNKNOWN = 0,
    DeviceStatus_Battery_ChargeStatus_CHARGING = 1,
    DeviceStatus_Battery_ChargeStatus_NOT_CHARGING = 2,
    DeviceStatus_Battery_ChargeStatus_FULL = 3
} DeviceStatus_Battery_ChargeStatus;
#define _DeviceStatus_Battery_ChargeStatus_MIN DeviceStatus_Battery_ChargeStatus_UNKNOWN
#define _DeviceStatus_Battery_ChargeStatus_MAX DeviceStatus_Battery_ChargeStatus_FULL
#define _DeviceStatus_Battery_ChargeStatus_ARRAYSIZE ((DeviceStatus_Battery_ChargeStatus)(DeviceStatus_Battery_ChargeStatus_FULL+1))

typedef enum _LockScreen_Status
{
    LockScreen_Status_DISABLED = 1,
    LockScreen_Status_ENABLED = 2,
    LockScreen_Status_ENABLED_AND_REQUIRED = 3
} LockScreen_Status;
#define _LockScreen_Status_MIN LockScreen_Status_DISABLED
#define _LockScreen_Status_MAX LockScreen_Status_ENABLED_AND_REQUIRED
#define _LockScreen_Status_ARRAYSIZE ((LockScreen_Status)(LockScreen_Status_ENABLED_AND_REQUIRED+1))

typedef enum _NightMode_Mode
{
    NightMode_Mode_OFF = 1,
    NightMode_Mode_SUNSET_ON = 2,
    NightMode_Mode_TIMING_ON = 3
} NightMode_Mode;
#define _NightMode_Mode_MIN NightMode_Mode_OFF
#define _NightMode_Mode_MAX NightMode_Mode_TIMING_ON
#define _NightMode_Mode_ARRAYSIZE ((NightMode_Mode)(NightMode_Mode_TIMING_ON+1))

typedef enum _AuthorizeUnlock_Device
{
    AuthorizeUnlock_Device_UNKNOWN = 0,
    AuthorizeUnlock_Device_LAPTOP = 1,
    AuthorizeUnlock_Device_PHONE = 2
} AuthorizeUnlock_Device;
#define _AuthorizeUnlock_Device_MIN AuthorizeUnlock_Device_UNKNOWN
#define _AuthorizeUnlock_Device_MAX AuthorizeUnlock_Device_PHONE
#define _AuthorizeUnlock_Device_ARRAYSIZE ((AuthorizeUnlock_Device)(AuthorizeUnlock_Device_PHONE+1))

typedef enum _WristScreen_Sensitivity
{
    WristScreen_Sensitivity_NONE = 0,
    WristScreen_Sensitivity_STANDARD = 1,
    WristScreen_Sensitivity_HIGH = 2
} WristScreen_Sensitivity;
#define _WristScreen_Sensitivity_MIN WristScreen_Sensitivity_NONE
#define _WristScreen_Sensitivity_MAX WristScreen_Sensitivity_HIGH
#define _WristScreen_Sensitivity_ARRAYSIZE ((WristScreen_Sensitivity)(WristScreen_Sensitivity_HIGH+1))

typedef enum _WidgetGroup_Style
{
    WidgetGroup_Style_STYLE_1 = 1,
    WidgetGroup_Style_STYLE_2 = 2,
    WidgetGroup_Style_STYLE_3 = 4,
    WidgetGroup_Style_STYLE_4 = 8,
    WidgetGroup_Style_STYLE_5 = 16,
    WidgetGroup_Style_STYLE_6 = 32,
    WidgetGroup_Style_STYLE_7 = 64,
    WidgetGroup_Style_STYLE_8 = 128
} WidgetGroup_Style;
#define _WidgetGroup_Style_MIN WidgetGroup_Style_STYLE_1
#define _WidgetGroup_Style_MAX WidgetGroup_Style_STYLE_8
#define _WidgetGroup_Style_ARRAYSIZE ((WidgetGroup_Style)(WidgetGroup_Style_STYLE_8+1))

typedef enum _AppLayout_Layout
{
    AppLayout_Layout_LIST = 1,
    AppLayout_Layout_GRID = 2
} AppLayout_Layout;
#define _AppLayout_Layout_MIN AppLayout_Layout_LIST
#define _AppLayout_Layout_MAX AppLayout_Layout_GRID
#define _AppLayout_Layout_ARRAYSIZE ((AppLayout_Layout)(AppLayout_Layout_GRID+1))

typedef enum _Shortcut_Type
{
    Shortcut_Type_NONE = 0,
    Shortcut_Type_VOICE = 1,
    Shortcut_Type_FUNCTION = 2,
    Shortcut_Type_SPORT = 3
} Shortcut_Type;
#define _Shortcut_Type_MIN Shortcut_Type_NONE
#define _Shortcut_Type_MAX Shortcut_Type_SPORT
#define _Shortcut_Type_ARRAYSIZE ((Shortcut_Type)(Shortcut_Type_SPORT+1))

typedef enum _PrepareOta_Type
{
    PrepareOta_Type_ALL = 0,
    PrepareOta_Type_ROM = 1,
    PrepareOta_Type_RES = 2,
    PrepareOta_Type_SILENT = 15
} PrepareOta_Type;
#define _PrepareOta_Type_MIN PrepareOta_Type_ALL
#define _PrepareOta_Type_MAX PrepareOta_Type_SILENT
#define _PrepareOta_Type_ARRAYSIZE ((PrepareOta_Type)(PrepareOta_Type_SILENT+1))

typedef enum _SmallHabit_Type
{
    SmallHabit_Type_GO_TO_BED_EARLY = 0,
    SmallHabit_Type_DO_MORE_EXERCISE = 1,
    SmallHabit_Type_DRINK_WATER = 2,
    SmallHabit_Type_READING = 3,
    SmallHabit_Type_EAT_BREAKFAST = 4,
    SmallHabit_Type_CALL_PARENTS = 5,
    SmallHabit_Type_EAT_FRUIT = 6,
    SmallHabit_Type_ACTIVE_NECK = 7,
    SmallHabit_Type_LEARN_TO_CHARGE = 8,
    SmallHabit_Type_PRACTICE_A_SKILL = 9,
    SmallHabit_Type_CONTACT_FRIEND = 10,
    SmallHabit_Type_SITTING_UPRIGHT = 11,
    SmallHabit_Type_EAT_VEGETABLE = 12,
    SmallHabit_Type_CIVILIZED_LANGUAGE = 13,
    SmallHabit_Type_MEDITATION = 14,
    SmallHabit_Type_BOOK_KEEPING = 15,
    SmallHabit_Type_RECITE_WORDS = 16,
    SmallHabit_Type_WALK_AFTER_MEAL = 17,
    SmallHabit_Type_GO_OUT_WITH_KEY = 18,
    SmallHabit_Type_DAILY_SUMMARY = 19,
    SmallHabit_Type_GARGLE_AFTER_MEAL = 20,
    SmallHabit_Type_SMILE_MORE = 21,
    SmallHabit_Type_TAKE_MEDICINE = 22,
    SmallHabit_Type_NOT_HUMPBACK = 23,
    SmallHabit_Type_CALLIGRAPHY = 24,
    SmallHabit_Type_LUNCH_BREAK = 25,
    SmallHabit_Type_DO_EYE_EXERCISES = 26,
    SmallHabit_Type_DO_YOGA = 27,
    SmallHabit_Type_APPLY_FACIAL_MASK = 28,
    SmallHabit_Type_QUIT_SUGAR = 29,
    SmallHabit_Type_SHOVEL_CAT_LITTER = 30,
    SmallHabit_Type_ONLINE_LESSON = 31,
    SmallHabit_Type_WATERING_FLOWERS = 32,
    SmallHabit_Type_TAKE_A_PICTURE_ONE_DAY = 33
} SmallHabit_Type;
#define _SmallHabit_Type_MIN SmallHabit_Type_GO_TO_BED_EARLY
#define _SmallHabit_Type_MAX SmallHabit_Type_TAKE_A_PICTURE_ONE_DAY
#define _SmallHabit_Type_ARRAYSIZE ((SmallHabit_Type)(SmallHabit_Type_TAKE_A_PICTURE_ONE_DAY+1))

typedef enum _WiFiConfig_AuthMode
{
    WiFiConfig_AuthMode_WPA_NONE = 1,
    WiFiConfig_AuthMode_WPA_PSK = 2,
    WiFiConfig_AuthMode_WPA_EAP = 4
} WiFiConfig_AuthMode;
#define _WiFiConfig_AuthMode_MIN WiFiConfig_AuthMode_WPA_NONE
#define _WiFiConfig_AuthMode_MAX WiFiConfig_AuthMode_WPA_EAP
#define _WiFiConfig_AuthMode_ARRAYSIZE ((WiFiConfig_AuthMode)(WiFiConfig_AuthMode_WPA_EAP+1))

typedef enum _WiFiConfig_Frequency
{
    WiFiConfig_Frequency_F_24G = 1,
    WiFiConfig_Frequency_F_5G = 2
} WiFiConfig_Frequency;
#define _WiFiConfig_Frequency_MIN WiFiConfig_Frequency_F_24G
#define _WiFiConfig_Frequency_MAX WiFiConfig_Frequency_F_5G
#define _WiFiConfig_Frequency_ARRAYSIZE ((WiFiConfig_Frequency)(WiFiConfig_Frequency_F_5G+1))

typedef enum _BasicStatus_Charging
{
    BasicStatus_Charging_START = 1,
    BasicStatus_Charging_QUIT = 2,
    BasicStatus_Charging_FINISH = 3
} BasicStatus_Charging;
#define _BasicStatus_Charging_MIN BasicStatus_Charging_START
#define _BasicStatus_Charging_MAX BasicStatus_Charging_FINISH
#define _BasicStatus_Charging_ARRAYSIZE ((BasicStatus_Charging)(BasicStatus_Charging_FINISH+1))

typedef enum _BasicStatus_Wearing
{
    BasicStatus_Wearing_ON = 1,
    BasicStatus_Wearing_OFF = 2
} BasicStatus_Wearing;
#define _BasicStatus_Wearing_MIN BasicStatus_Wearing_ON
#define _BasicStatus_Wearing_MAX BasicStatus_Wearing_OFF
#define _BasicStatus_Wearing_ARRAYSIZE ((BasicStatus_Wearing)(BasicStatus_Wearing_OFF+1))

typedef enum _BasicStatus_Sleeping
{
    BasicStatus_Sleeping_IN = 1,
    BasicStatus_Sleeping_OUT = 2
} BasicStatus_Sleeping;
#define _BasicStatus_Sleeping_MIN BasicStatus_Sleeping_IN
#define _BasicStatus_Sleeping_MAX BasicStatus_Sleeping_OUT
#define _BasicStatus_Sleeping_ARRAYSIZE ((BasicStatus_Sleeping)(BasicStatus_Sleeping_OUT+1))

typedef enum _BasicStatus_Warning
{
    BasicStatus_Warning_HEART_RATE_HIGH = 1,
    BasicStatus_Warning_HEART_RATE_LOW = 2,
    BasicStatus_Warning_ACTIVE_HEART_RATE_HIGH = 3,
    BasicStatus_Warning_ACTIVE_HEART_RATE_LOW = 4
} BasicStatus_Warning;
#define _BasicStatus_Warning_MIN BasicStatus_Warning_HEART_RATE_HIGH
#define _BasicStatus_Warning_MAX BasicStatus_Warning_ACTIVE_HEART_RATE_LOW
#define _BasicStatus_Warning_ARRAYSIZE ((BasicStatus_Warning)(BasicStatus_Warning_ACTIVE_HEART_RATE_LOW+1))

typedef enum _ReportData_Type
{
    ReportData_Type_DEVICE_LOG = 1,
    ReportData_Type_STATISTICS = 2,
    ReportData_Type_DUMP_LOG = 3
} ReportData_Type;
#define _ReportData_Type_MIN ReportData_Type_DEVICE_LOG
#define _ReportData_Type_MAX ReportData_Type_DUMP_LOG
#define _ReportData_Type_ARRAYSIZE ((ReportData_Type)(ReportData_Type_DUMP_LOG+1))

typedef enum _ReportData_Status
{
    ReportData_Status_SUCCESS = 0,
    ReportData_Status_NO_DATA = 1,
    ReportData_Status_URL_DIRECT = 2,
    ReportData_Status_BUSY = 3,
    ReportData_Status_FAIL = 10
} ReportData_Status;
#define _ReportData_Status_MIN ReportData_Status_SUCCESS
#define _ReportData_Status_MAX ReportData_Status_FAIL
#define _ReportData_Status_ARRAYSIZE ((ReportData_Status)(ReportData_Status_FAIL+1))

/* Struct definitions */
typedef struct _App_List
{
    pb_size_t list_count;
    struct _App *list;
    /* @@protoc_insertion_point(struct:App_List) */
} App_List;

typedef struct _AuthorizeUnlock_List
{
    pb_size_t list_count;
    struct _AuthorizeUnlock *list;
    /* @@protoc_insertion_point(struct:AuthorizeUnlock_List) */
} AuthorizeUnlock_List;

typedef struct _BasicStatus
{
    char dummy_field;
    /* @@protoc_insertion_point(struct:BasicStatus) */
} BasicStatus;

typedef struct _DeviceInfo
{
    char *serial_number;
    char *firmware_version;
    char *imei;
    char *model;
    /* @@protoc_insertion_point(struct:DeviceInfo) */
} DeviceInfo;

typedef struct _Language
{
    char *locale;
    /* @@protoc_insertion_point(struct:Language) */
} Language;

typedef struct _PrepareOta
{
    char dummy_field;
    /* @@protoc_insertion_point(struct:PrepareOta) */
} PrepareOta;

typedef struct _Shortcut_List
{
    pb_size_t list_count;
    struct _Shortcut *list;
    /* @@protoc_insertion_point(struct:Shortcut_List) */
} Shortcut_List;

typedef struct _SmallHabit_List
{
    pb_size_t list_count;
    struct _SmallHabit *list;
    /* @@protoc_insertion_point(struct:SmallHabit_List) */
} SmallHabit_List;

typedef struct _SmallHabit_TypeList
{
    pb_size_t type_count;
    SmallHabit_Type *type;
    /* @@protoc_insertion_point(struct:SmallHabit_TypeList) */
} SmallHabit_TypeList;

typedef struct _WiFiConfig_EAPInfo
{
    char *identity;
    char *password;
    /* @@protoc_insertion_point(struct:WiFiConfig_EAPInfo) */
} WiFiConfig_EAPInfo;

typedef struct _WiFiConfig_List
{
    pb_size_t list_count;
    struct _WiFiConfig *list;
    /* @@protoc_insertion_point(struct:WiFiConfig_List) */
} WiFiConfig_List;

typedef struct _WiFiConfig_PSKInfo
{
    char *password;
    /* @@protoc_insertion_point(struct:WiFiConfig_PSKInfo) */
} WiFiConfig_PSKInfo;

typedef struct _WidgetV2_List
{
    pb_size_t support_widgets_count;
    struct _WidgetV2 *support_widgets;
    /* @@protoc_insertion_point(struct:WidgetV2_List) */
} WidgetV2_List;

typedef struct _App
{
    char *id;
    char *name;
    bool has_hidden;
    bool hidden;
    /* @@protoc_insertion_point(struct:App) */
} App;

typedef struct _AppLayout
{
    AppLayout_Layout layout;
    /* @@protoc_insertion_point(struct:AppLayout) */
} AppLayout;

typedef struct _AuthorizeUnlock
{
    AuthorizeUnlock_Device device;
    bool enable;
    /* @@protoc_insertion_point(struct:AuthorizeUnlock) */
} AuthorizeUnlock;

typedef struct _BasicStatus_Sport
{
    SportType sport_type;
    bool has_sport_state;
    SportState sport_state;
    /* @@protoc_insertion_point(struct:BasicStatus_Sport) */
} BasicStatus_Sport;

typedef struct _DeviceStatus_Battery
{
    uint8_t capacity;
    bool has_charge_status;
    DeviceStatus_Battery_ChargeStatus charge_status;
    /* @@protoc_insertion_point(struct:DeviceStatus_Battery) */
} DeviceStatus_Battery;

typedef struct _ForceUpgrade
{
    bool force;
    char *firmware_version;
    /* @@protoc_insertion_point(struct:ForceUpgrade) */
} ForceUpgrade;

typedef struct _HidStatus
{
    bool enable;
    /* @@protoc_insertion_point(struct:HidStatus) */
} HidStatus;

typedef struct _LockScreen
{
    LockScreen_Status status;
    char *pwd;
    bool has_locked;
    bool locked;
    /* @@protoc_insertion_point(struct:LockScreen) */
} LockScreen;

typedef struct _NightMode
{
    NightMode_Mode mode;
    bool has_start_time;
    Time start_time;
    bool has_end_time;
    Time end_time;
    /* @@protoc_insertion_point(struct:NightMode) */
} NightMode;

typedef struct _PrepareOta_Request
{
    bool force;
    PrepareOta_Type type;
    char *firmware_version;
    char *file_md5;
    char *change_log;
    /* @@protoc_insertion_point(struct:PrepareOta_Request) */
} PrepareOta_Request;

typedef struct _PrepareOta_Response
{
    PrepareStatus prepare_status;
    bool has_expected_slice_length;
    uint32_t expected_slice_length;
    /* @@protoc_insertion_point(struct:PrepareOta_Response) */
} PrepareOta_Response;

typedef struct _ReportData
{
    ReportData_Type type;
    char *id;
    /* @@protoc_insertion_point(struct:ReportData) */
} ReportData;

typedef struct _ReportData_Result
{
    ReportData_Type type;
    ReportData_Status status;
    /* @@protoc_insertion_point(struct:ReportData_Result) */
} ReportData_Result;

typedef struct _Shortcut
{
    Shortcut_Type type;
    bool has_sub_type;
    uint16_t sub_type;
    /* @@protoc_insertion_point(struct:Shortcut) */
} Shortcut;

typedef struct _SmallHabit
{
    SmallHabit_Type type;
    pb_size_t time_count;
    struct _Time *time;
    ClockMode clock_mode;
    bool has_week_days;
    uint8_t week_days;
    bool enable;
    char *label;
    /* @@protoc_insertion_point(struct:SmallHabit) */
} SmallHabit;

typedef struct _SportOption
{
    SportType sport_type;
    bool show;
    /* @@protoc_insertion_point(struct:SportOption) */
} SportOption;

typedef struct _SportOption_List
{
    pb_size_t list_count;
    struct _SportOption *list;
    bool has_shortcut_sport_type;
    SportType shortcut_sport_type;
    /* @@protoc_insertion_point(struct:SportOption_List) */
} SportOption_List;

typedef struct _SystemTime
{
    Date date;
    Time time;
    bool has_time_zone;
    Timezone time_zone;
    bool has_is_12_hours;
    bool is_12_hours;
    /* @@protoc_insertion_point(struct:SystemTime) */
} SystemTime;

typedef struct _TimingSetting
{
    TimingMode timing_mode;
    bool has_start_time;
    Time start_time;
    bool has_end_time;
    Time end_time;
    bool has_repeat_days;
    uint16_t repeat_days;
    bool has_timestamp;
    uint32_t timestamp;
    /* @@protoc_insertion_point(struct:TimingSetting) */
} TimingSetting;

typedef struct _WiFiConfig_BasicInfo
{
    char *ssid;
    WiFiConfig_AuthMode auth_mode;
    WiFiConfig_Frequency frequency;
    /* @@protoc_insertion_point(struct:WiFiConfig_BasicInfo) */
} WiFiConfig_BasicInfo;

typedef struct _WiFiConfig_Capability
{
    bool has_support_auth_mode;
    uint8_t support_auth_mode;
    bool has_support_frequency;
    uint8_t support_frequency;
    /* @@protoc_insertion_point(struct:WiFiConfig_Capability) */
} WiFiConfig_Capability;

typedef struct _Widget
{
    uint8_t function;
    bool enable;
    bool has_order;
    uint8_t order;
    /* @@protoc_insertion_point(struct:Widget) */
} Widget;

typedef struct _WidgetGroup
{
    uint8_t sequency;
    WidgetGroup_Style style;
    pb_size_t widgets_count;
    struct _WidgetV2 *widgets;
    /* @@protoc_insertion_point(struct:WidgetGroup) */
} WidgetGroup;

typedef struct _WidgetGroup_Config
{
    uint8_t min_group_number;
    uint8_t max_group_number;
    uint16_t support_group_styles;
    /* @@protoc_insertion_point(struct:WidgetGroup_Config) */
} WidgetGroup_Config;

typedef struct _WidgetV2
{
    WidgetStyle style;
    uint8_t function;
    uint16_t sub_type;
    char *name;
    bool has_sport_type;
    SportType sport_type;
    char *app_id;
    char *app_name;
    /* @@protoc_insertion_point(struct:WidgetV2) */
} WidgetV2;

typedef struct _Widget_List
{
    pb_size_t list_count;
    struct _Widget *list;
    bool has_support_max_number;
    uint8_t support_max_number;
    bool has_support_min_number;
    uint8_t support_min_number;
    /* @@protoc_insertion_point(struct:Widget_List) */
} Widget_List;

typedef struct _WristScreen
{
    TimingMode timing_mode;
    bool has_start_time;
    Time start_time;
    bool has_end_time;
    Time end_time;
    bool has_sensitivity;
    WristScreen_Sensitivity sensitivity;
    /* @@protoc_insertion_point(struct:WristScreen) */
} WristScreen;

typedef struct _BasicStatus_Present
{
    bool is_charging;
    bool has_battery;
    uint8_t battery;
    bool is_wearing;
    bool is_sleeping;
    BasicStatus_Sport sport;
    /* @@protoc_insertion_point(struct:BasicStatus_Present) */
} BasicStatus_Present;

typedef struct _BasicStatus_Report
{
    bool has_charging;
    BasicStatus_Charging charging;
    bool has_wearing;
    BasicStatus_Wearing wearing;
    bool has_sleeping;
    BasicStatus_Sleeping sleeping;
    bool has_waring;
    BasicStatus_Warning waring;
    bool has_sport;
    BasicStatus_Sport sport;
    /* @@protoc_insertion_point(struct:BasicStatus_Report) */
} BasicStatus_Report;

typedef struct _DeviceStatus
{
    DeviceStatus_Battery battery;
    /* @@protoc_insertion_point(struct:DeviceStatus) */
} DeviceStatus;

typedef struct _WiFiConfig
{
    WiFiConfig_BasicInfo basic_info;
    pb_size_t which_auth_info;
    union
    {
        WiFiConfig_PSKInfo psk_info;
        WiFiConfig_EAPInfo eap_info;
    } auth_info;
    /* @@protoc_insertion_point(struct:WiFiConfig) */
} WiFiConfig;

typedef struct _WidgetGroup_List
{
    pb_size_t groups_count;
    struct _WidgetGroup *groups;
    bool has_full;
    bool full;
    bool has_config;
    WidgetGroup_Config config;
    /* @@protoc_insertion_point(struct:WidgetGroup_List) */
} WidgetGroup_List;

typedef struct _System
{
    pb_size_t which_payload;
    union
    {
        ResetMode reset_mode;
        DeviceStatus device_status;
        DeviceInfo device_info;
        SystemTime system_time;
        FindMode find_mode;
        ForceUpgrade force_upgrade;
        WristScreen wrist_screen;
        Widget widget;
        Widget_List widget_list;
        App_List app_list;
        TimingSetting timing_setting;
        Shortcut shortcut;
        Shortcut_List shortcut_list;
        SportOption_List sport_option_list;
        HidStatus hid_status;
        PrepareOta_Request prepare_ota_request;
        PrepareOta_Response prepare_ota_response;
        AppLayout app_layout;
        LockScreen lock_screen;
        Language language;
        AuthorizeUnlock_List authorize_unlock_list;
        AuthorizeUnlock authorize_unlock;
        NightMode night_mode;
        SmallHabit small_habit;
        SmallHabit_List small_habit_list;
        SmallHabit_Type small_habit_type;
        SmallHabit_TypeList small_habit_type_list;
        WidgetGroup_List widget_group_list;
        WidgetV2_List widget_v2_list;
        WiFiConfig_Capability wifi_capability;
        WiFiConfig_BasicInfo wifi_basic_info;
        WiFiConfig wifi_config;
        WiFiConfig_List wifi_config_list;
        BasicStatus_Present present_basic_status;
        BasicStatus_Report report_basic_status;
        ReportData report_data;
        ReportData_Result report_data_result;
    } payload;
    /* @@protoc_insertion_point(struct:System) */
} System;

/* Default values for struct fields */

/* Initializer values for message structs */
#define System_init_default                      {0, {_ResetMode_MIN}}
#define DeviceStatus_init_default                {DeviceStatus_Battery_init_default}
#define DeviceStatus_Battery_init_default        {0, false, _DeviceStatus_Battery_ChargeStatus_MIN}
#define DeviceInfo_init_default                  {NULL, NULL, NULL, NULL}
#define SystemTime_init_default                  {Date_init_default, Time_init_default, false, Timezone_init_default, false, 0}
#define Language_init_default                    {NULL}
#define HidStatus_init_default                   {0}
#define LockScreen_init_default                  {_LockScreen_Status_MIN, NULL, false, 0}
#define NightMode_init_default                   {_NightMode_Mode_MIN, false, Time_init_default, false, Time_init_default}
#define AuthorizeUnlock_init_default             {_AuthorizeUnlock_Device_MIN, 0}
#define AuthorizeUnlock_List_init_default        {0, NULL}
#define TimingSetting_init_default               {_TimingMode_MIN, false, Time_init_default, false, Time_init_default, false, 0, false, 0}
#define WristScreen_init_default                 {_TimingMode_MIN, false, Time_init_default, false, Time_init_default, false, _WristScreen_Sensitivity_MIN}
#define Widget_init_default                      {0, 0, false, 0}
#define Widget_List_init_default                 {0, NULL, false, 0, false, 0}
#define WidgetV2_init_default                    {_WidgetStyle_MIN, 0, 0, NULL, false, _SportType_MIN, NULL, NULL}
#define WidgetV2_List_init_default               {0, NULL}
#define WidgetGroup_init_default                 {0, _WidgetGroup_Style_MIN, 0, NULL}
#define WidgetGroup_Config_init_default          {0, 0, 0}
#define WidgetGroup_List_init_default            {0, NULL, false, 0, false, WidgetGroup_Config_init_default}
#define App_init_default                         {NULL, NULL, false, 0}
#define App_List_init_default                    {0, NULL}
#define AppLayout_init_default                   {_AppLayout_Layout_MIN}
#define Shortcut_init_default                    {_Shortcut_Type_MIN, false, 0}
#define Shortcut_List_init_default               {0, NULL}
#define SportOption_init_default                 {_SportType_MIN, 0}
#define SportOption_List_init_default            {0, NULL, false, _SportType_MIN}
#define ForceUpgrade_init_default                {0, NULL}
#define PrepareOta_init_default                  {0}
#define PrepareOta_Request_init_default          {0, _PrepareOta_Type_MIN, NULL, NULL, NULL}
#define PrepareOta_Response_init_default         {_PrepareStatus_MIN, false, 0}
#define SmallHabit_init_default                  {_SmallHabit_Type_MIN, 0, NULL, _ClockMode_MIN, false, 0, 0, NULL}
#define SmallHabit_List_init_default             {0, NULL}
#define SmallHabit_TypeList_init_default         {0, NULL}
#define WiFiConfig_init_default                  {WiFiConfig_BasicInfo_init_default, 0, {WiFiConfig_PSKInfo_init_default}}
#define WiFiConfig_Capability_init_default       {false, 0, false, 0}
#define WiFiConfig_BasicInfo_init_default        {NULL, _WiFiConfig_AuthMode_MIN, _WiFiConfig_Frequency_MIN}
#define WiFiConfig_PSKInfo_init_default          {NULL}
#define WiFiConfig_EAPInfo_init_default          {NULL, NULL}
#define WiFiConfig_List_init_default             {0, NULL}
#define BasicStatus_init_default                 {0}
#define BasicStatus_Sport_init_default           {_SportType_MIN, false, _SportState_MIN}
#define BasicStatus_Present_init_default         {0, false, 0, 0, 0, BasicStatus_Sport_init_default}
#define BasicStatus_Report_init_default          {false, _BasicStatus_Charging_MIN, false, _BasicStatus_Wearing_MIN, false, _BasicStatus_Sleeping_MIN, false, _BasicStatus_Warning_MIN, false, BasicStatus_Sport_init_default}
#define ReportData_init_default                  {_ReportData_Type_MIN, NULL}
#define ReportData_Result_init_default           {_ReportData_Type_MIN, _ReportData_Status_MIN}
#define System_init_zero                         {0, {_ResetMode_MIN}}
#define DeviceStatus_init_zero                   {DeviceStatus_Battery_init_zero}
#define DeviceStatus_Battery_init_zero           {0, false, _DeviceStatus_Battery_ChargeStatus_MIN}
#define DeviceInfo_init_zero                     {NULL, NULL, NULL, NULL}
#define SystemTime_init_zero                     {Date_init_zero, Time_init_zero, false, Timezone_init_zero, false, 0}
#define Language_init_zero                       {NULL}
#define HidStatus_init_zero                      {0}
#define LockScreen_init_zero                     {_LockScreen_Status_MIN, NULL, false, 0}
#define NightMode_init_zero                      {_NightMode_Mode_MIN, false, Time_init_zero, false, Time_init_zero}
#define AuthorizeUnlock_init_zero                {_AuthorizeUnlock_Device_MIN, 0}
#define AuthorizeUnlock_List_init_zero           {0, NULL}
#define TimingSetting_init_zero                  {_TimingMode_MIN, false, Time_init_zero, false, Time_init_zero, false, 0, false, 0}
#define WristScreen_init_zero                    {_TimingMode_MIN, false, Time_init_zero, false, Time_init_zero, false, _WristScreen_Sensitivity_MIN}
#define Widget_init_zero                         {0, 0, false, 0}
#define Widget_List_init_zero                    {0, NULL, false, 0, false, 0}
#define WidgetV2_init_zero                       {_WidgetStyle_MIN, 0, 0, NULL, false, _SportType_MIN, NULL, NULL}
#define WidgetV2_List_init_zero                  {0, NULL}
#define WidgetGroup_init_zero                    {0, _WidgetGroup_Style_MIN, 0, NULL}
#define WidgetGroup_Config_init_zero             {0, 0, 0}
#define WidgetGroup_List_init_zero               {0, NULL, false, 0, false, WidgetGroup_Config_init_zero}
#define App_init_zero                            {NULL, NULL, false, 0}
#define App_List_init_zero                       {0, NULL}
#define AppLayout_init_zero                      {_AppLayout_Layout_MIN}
#define Shortcut_init_zero                       {_Shortcut_Type_MIN, false, 0}
#define Shortcut_List_init_zero                  {0, NULL}
#define SportOption_init_zero                    {_SportType_MIN, 0}
#define SportOption_List_init_zero               {0, NULL, false, _SportType_MIN}
#define ForceUpgrade_init_zero                   {0, NULL}
#define PrepareOta_init_zero                     {0}
#define PrepareOta_Request_init_zero             {0, _PrepareOta_Type_MIN, NULL, NULL, NULL}
#define PrepareOta_Response_init_zero            {_PrepareStatus_MIN, false, 0}
#define SmallHabit_init_zero                     {_SmallHabit_Type_MIN, 0, NULL, _ClockMode_MIN, false, 0, 0, NULL}
#define SmallHabit_List_init_zero                {0, NULL}
#define SmallHabit_TypeList_init_zero            {0, NULL}
#define WiFiConfig_init_zero                     {WiFiConfig_BasicInfo_init_zero, 0, {WiFiConfig_PSKInfo_init_zero}}
#define WiFiConfig_Capability_init_zero          {false, 0, false, 0}
#define WiFiConfig_BasicInfo_init_zero           {NULL, _WiFiConfig_AuthMode_MIN, _WiFiConfig_Frequency_MIN}
#define WiFiConfig_PSKInfo_init_zero             {NULL}
#define WiFiConfig_EAPInfo_init_zero             {NULL, NULL}
#define WiFiConfig_List_init_zero                {0, NULL}
#define BasicStatus_init_zero                    {0}
#define BasicStatus_Sport_init_zero              {_SportType_MIN, false, _SportState_MIN}
#define BasicStatus_Present_init_zero            {0, false, 0, 0, 0, BasicStatus_Sport_init_zero}
#define BasicStatus_Report_init_zero             {false, _BasicStatus_Charging_MIN, false, _BasicStatus_Wearing_MIN, false, _BasicStatus_Sleeping_MIN, false, _BasicStatus_Warning_MIN, false, BasicStatus_Sport_init_zero}
#define ReportData_init_zero                     {_ReportData_Type_MIN, NULL}
#define ReportData_Result_init_zero              {_ReportData_Type_MIN, _ReportData_Status_MIN}

/* Field tags (for use in manual encoding/decoding) */
#define App_List_list_tag                        1
#define AuthorizeUnlock_List_list_tag            1
#define DeviceInfo_serial_number_tag             1
#define DeviceInfo_firmware_version_tag          2
#define DeviceInfo_imei_tag                      3
#define DeviceInfo_model_tag                     4
#define Language_locale_tag                      1
#define Shortcut_List_list_tag                   1
#define SmallHabit_List_list_tag                 1
#define SmallHabit_TypeList_type_tag             1
#define WiFiConfig_EAPInfo_identity_tag          1
#define WiFiConfig_EAPInfo_password_tag          2
#define WiFiConfig_List_list_tag                 1
#define WiFiConfig_PSKInfo_password_tag          1
#define WidgetV2_List_support_widgets_tag        1
#define App_id_tag                               1
#define App_name_tag                             2
#define App_hidden_tag                           3
#define AppLayout_layout_tag                     1
#define AuthorizeUnlock_device_tag               1
#define AuthorizeUnlock_enable_tag               2
#define BasicStatus_Sport_sport_type_tag         1
#define BasicStatus_Sport_sport_state_tag        2
#define DeviceStatus_Battery_capacity_tag        1
#define DeviceStatus_Battery_charge_status_tag   2
#define ForceUpgrade_force_tag                   1
#define ForceUpgrade_firmware_version_tag        2
#define HidStatus_enable_tag                     1
#define LockScreen_status_tag                    1
#define LockScreen_pwd_tag                       2
#define LockScreen_locked_tag                    3
#define NightMode_mode_tag                       1
#define NightMode_start_time_tag                 2
#define NightMode_end_time_tag                   3
#define PrepareOta_Request_force_tag             1
#define PrepareOta_Request_type_tag              2
#define PrepareOta_Request_firmware_version_tag  3
#define PrepareOta_Request_file_md5_tag          4
#define PrepareOta_Request_change_log_tag        5
#define PrepareOta_Response_prepare_status_tag   1
#define PrepareOta_Response_expected_slice_length_tag 2
#define ReportData_type_tag                      1
#define ReportData_id_tag                        2
#define ReportData_Result_type_tag               1
#define ReportData_Result_status_tag             2
#define Shortcut_type_tag                        1
#define Shortcut_sub_type_tag                    2
#define SmallHabit_type_tag                      1
#define SmallHabit_time_tag                      2
#define SmallHabit_clock_mode_tag                3
#define SmallHabit_week_days_tag                 4
#define SmallHabit_enable_tag                    5
#define SmallHabit_label_tag                     6
#define SportOption_sport_type_tag               1
#define SportOption_show_tag                     2
#define SportOption_List_list_tag                1
#define SportOption_List_shortcut_sport_type_tag 2
#define SystemTime_date_tag                      1
#define SystemTime_time_tag                      2
#define SystemTime_time_zone_tag                 3
#define SystemTime_is_12_hours_tag               4
#define TimingSetting_timing_mode_tag            1
#define TimingSetting_start_time_tag             2
#define TimingSetting_end_time_tag               3
#define TimingSetting_repeat_days_tag            4
#define TimingSetting_timestamp_tag              5
#define WiFiConfig_BasicInfo_ssid_tag            1
#define WiFiConfig_BasicInfo_auth_mode_tag       2
#define WiFiConfig_BasicInfo_frequency_tag       3
#define WiFiConfig_Capability_support_auth_mode_tag 1
#define WiFiConfig_Capability_support_frequency_tag 2
#define Widget_function_tag                      1
#define Widget_enable_tag                        2
#define Widget_order_tag                         3
#define WidgetGroup_sequency_tag                 1
#define WidgetGroup_style_tag                    2
#define WidgetGroup_widgets_tag                  3
#define WidgetGroup_Config_min_group_number_tag  1
#define WidgetGroup_Config_max_group_number_tag  2
#define WidgetGroup_Config_support_group_styles_tag 3
#define WidgetV2_style_tag                       1
#define WidgetV2_function_tag                    2
#define WidgetV2_sub_type_tag                    3
#define WidgetV2_name_tag                        4
#define WidgetV2_sport_type_tag                  5
#define WidgetV2_app_id_tag                      6
#define WidgetV2_app_name_tag                    7
#define Widget_List_list_tag                     1
#define Widget_List_support_max_number_tag       2
#define Widget_List_support_min_number_tag       3
#define WristScreen_timing_mode_tag              1
#define WristScreen_start_time_tag               2
#define WristScreen_end_time_tag                 3
#define WristScreen_sensitivity_tag              4
#define BasicStatus_Present_is_charging_tag      1
#define BasicStatus_Present_battery_tag          2
#define BasicStatus_Present_is_wearing_tag       3
#define BasicStatus_Present_is_sleeping_tag      4
#define BasicStatus_Present_sport_tag            5
#define BasicStatus_Report_charging_tag          1
#define BasicStatus_Report_wearing_tag           2
#define BasicStatus_Report_sleeping_tag          3
#define BasicStatus_Report_waring_tag            4
#define BasicStatus_Report_sport_tag             5
#define DeviceStatus_battery_tag                 1
#define WiFiConfig_psk_info_tag                  2
#define WiFiConfig_eap_info_tag                  3
#define WiFiConfig_basic_info_tag                1
#define WidgetGroup_List_groups_tag              1
#define WidgetGroup_List_full_tag                2
#define WidgetGroup_List_config_tag              3
#define System_reset_mode_tag                    1
#define System_device_status_tag                 2
#define System_device_info_tag                   3
#define System_system_time_tag                   4
#define System_find_mode_tag                     5
#define System_force_upgrade_tag                 6
#define System_wrist_screen_tag                  7
#define System_widget_tag                        8
#define System_widget_list_tag                   9
#define System_app_list_tag                      10
#define System_timing_setting_tag                11
#define System_shortcut_tag                      12
#define System_shortcut_list_tag                 13
#define System_sport_option_list_tag             14
#define System_hid_status_tag                    15
#define System_prepare_ota_request_tag           16
#define System_prepare_ota_response_tag          17
#define System_app_layout_tag                    18
#define System_lock_screen_tag                   19
#define System_language_tag                      20
#define System_authorize_unlock_list_tag         21
#define System_authorize_unlock_tag              22
#define System_night_mode_tag                    23
#define System_small_habit_tag                   24
#define System_small_habit_list_tag              25
#define System_small_habit_type_tag              26
#define System_small_habit_type_list_tag         27
#define System_widget_group_list_tag             28
#define System_widget_v2_list_tag                29
#define System_wifi_capability_tag               30
#define System_wifi_basic_info_tag               31
#define System_wifi_config_tag                   32
#define System_wifi_config_list_tag              33
#define System_present_basic_status_tag          48
#define System_report_basic_status_tag           49
#define System_report_data_tag                   50
#define System_report_data_result_tag            51

/* Struct field encoding specification for nanopb */
extern const pb_field_t System_fields[38];
extern const pb_field_t DeviceStatus_fields[2];
extern const pb_field_t DeviceStatus_Battery_fields[3];
extern const pb_field_t DeviceInfo_fields[5];
extern const pb_field_t SystemTime_fields[5];
extern const pb_field_t Language_fields[2];
extern const pb_field_t HidStatus_fields[2];
extern const pb_field_t LockScreen_fields[4];
extern const pb_field_t NightMode_fields[4];
extern const pb_field_t AuthorizeUnlock_fields[3];
extern const pb_field_t AuthorizeUnlock_List_fields[2];
extern const pb_field_t TimingSetting_fields[6];
extern const pb_field_t WristScreen_fields[5];
extern const pb_field_t Widget_fields[4];
extern const pb_field_t Widget_List_fields[4];
extern const pb_field_t WidgetV2_fields[8];
extern const pb_field_t WidgetV2_List_fields[2];
extern const pb_field_t WidgetGroup_fields[4];
extern const pb_field_t WidgetGroup_Config_fields[4];
extern const pb_field_t WidgetGroup_List_fields[4];
extern const pb_field_t App_fields[4];
extern const pb_field_t App_List_fields[2];
extern const pb_field_t AppLayout_fields[2];
extern const pb_field_t Shortcut_fields[3];
extern const pb_field_t Shortcut_List_fields[2];
extern const pb_field_t SportOption_fields[3];
extern const pb_field_t SportOption_List_fields[3];
extern const pb_field_t ForceUpgrade_fields[3];
extern const pb_field_t PrepareOta_fields[1];
extern const pb_field_t PrepareOta_Request_fields[6];
extern const pb_field_t PrepareOta_Response_fields[3];
extern const pb_field_t SmallHabit_fields[7];
extern const pb_field_t SmallHabit_List_fields[2];
extern const pb_field_t SmallHabit_TypeList_fields[2];
extern const pb_field_t WiFiConfig_fields[4];
extern const pb_field_t WiFiConfig_Capability_fields[3];
extern const pb_field_t WiFiConfig_BasicInfo_fields[4];
extern const pb_field_t WiFiConfig_PSKInfo_fields[2];
extern const pb_field_t WiFiConfig_EAPInfo_fields[3];
extern const pb_field_t WiFiConfig_List_fields[2];
extern const pb_field_t BasicStatus_fields[1];
extern const pb_field_t BasicStatus_Sport_fields[3];
extern const pb_field_t BasicStatus_Present_fields[6];
extern const pb_field_t BasicStatus_Report_fields[6];
extern const pb_field_t ReportData_fields[3];
extern const pb_field_t ReportData_Result_fields[3];

/* Maximum encoded size of messages (where known) */
/* System_size depends on runtime parameters */
#define DeviceStatus_size                        10
#define DeviceStatus_Battery_size                8
/* DeviceInfo_size depends on runtime parameters */
#define SystemTime_size                          (54 + Timezone_size)
/* Language_size depends on runtime parameters */
#define HidStatus_size                           2
/* LockScreen_size depends on runtime parameters */
#define NightMode_size                           54
#define AuthorizeUnlock_size                     4
/* AuthorizeUnlock_List_size depends on runtime parameters */
#define TimingSetting_size                       66
#define WristScreen_size                         56
#define Widget_size                              14
/* Widget_List_size depends on runtime parameters */
/* WidgetV2_size depends on runtime parameters */
/* WidgetV2_List_size depends on runtime parameters */
/* WidgetGroup_size depends on runtime parameters */
#define WidgetGroup_Config_size                  18
/* WidgetGroup_List_size depends on runtime parameters */
/* App_size depends on runtime parameters */
/* App_List_size depends on runtime parameters */
#define AppLayout_size                           2
#define Shortcut_size                            8
/* Shortcut_List_size depends on runtime parameters */
#define SportOption_size                         5
/* SportOption_List_size depends on runtime parameters */
/* ForceUpgrade_size depends on runtime parameters */
#define PrepareOta_size                          0
/* PrepareOta_Request_size depends on runtime parameters */
#define PrepareOta_Response_size                 9
/* SmallHabit_size depends on runtime parameters */
/* SmallHabit_List_size depends on runtime parameters */
/* SmallHabit_TypeList_size depends on runtime parameters */
/* WiFiConfig_size depends on runtime parameters */
#define WiFiConfig_Capability_size               12
/* WiFiConfig_BasicInfo_size depends on runtime parameters */
/* WiFiConfig_PSKInfo_size depends on runtime parameters */
/* WiFiConfig_EAPInfo_size depends on runtime parameters */
/* WiFiConfig_List_size depends on runtime parameters */
#define BasicStatus_size                         0
#define BasicStatus_Sport_size                   5
#define BasicStatus_Present_size                 19
#define BasicStatus_Report_size                  15
/* ReportData_size depends on runtime parameters */
#define ReportData_Result_size                   4

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define WEAR_SYSTEM_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
