/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.6 at Fri Jun 10 15:10:20 2022. */

#ifndef PB_WEAR_CLOCK_PB_H_INCLUDED
#define PB_WEAR_CLOCK_PB_H_INCLUDED
#include <pb.h>

#include "wear_common.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _ClockError
{
    ClockError_EXCEED_LIMIT = 1,
    ClockError_INVALID_ID = 2,
    ClockError_INVALID_DATA = 3,
    ClockError_NOT_SUPPORT_HOLIDAY = 4
} ClockError;
#define _ClockError_MIN ClockError_EXCEED_LIMIT
#define _ClockError_MAX ClockError_NOT_SUPPORT_HOLIDAY
#define _ClockError_ARRAYSIZE ((ClockError)(ClockError_NOT_SUPPORT_HOLIDAY+1))

typedef enum _WorldClockResult
{
    WorldClockResult_OPERATE_SUCCESS = 0,
    WorldClockResult_ID_NOT_SUPPORT = 1
} WorldClockResult;
#define _WorldClockResult_MIN WorldClockResult_OPERATE_SUCCESS
#define _WorldClockResult_MAX WorldClockResult_ID_NOT_SUPPORT
#define _WorldClockResult_ARRAYSIZE ((WorldClockResult)(WorldClockResult_ID_NOT_SUPPORT+1))

typedef enum _Clock_ClockID
{
    Clock_ClockID_GET_CLOCK_LIST = 0,
    Clock_ClockID_ADD_CLOCK = 1,
    Clock_ClockID_UPDATE_CLOCK = 2,
    Clock_ClockID_REMOVE_CLOCK = 3,
    Clock_ClockID_REMOVE_CLOCKS = 4,
    Clock_ClockID_ENABLE_OR_DISABLE_CLOCK = 5,
    Clock_ClockID_SYNC_HOLIDAY = 6,
    Clock_ClockID_WEAR_REQUEST_HOLIDAY = 7,
    Clock_ClockID_GET_WORK_AND_REST = 8,
    Clock_ClockID_SET_WORK_AND_REST = 9,
    Clock_ClockID_GET_WORLD_CLOCK_LIST = 10,
    Clock_ClockID_ADD_WORLD_CLOCK = 11,
    Clock_ClockID_REMOVE_WORLD_CLOCK = 12,
    Clock_ClockID_REMOVE_WORLD_CLOCKS = 13,
    Clock_ClockID_PHONE_ALARM_OPERATION = 16
} Clock_ClockID;
#define _Clock_ClockID_MIN Clock_ClockID_GET_CLOCK_LIST
#define _Clock_ClockID_MAX Clock_ClockID_PHONE_ALARM_OPERATION
#define _Clock_ClockID_ARRAYSIZE ((Clock_ClockID)(Clock_ClockID_PHONE_ALARM_OPERATION+1))

typedef enum _WorkAndRest_Source
{
    WorkAndRest_Source_NONE = 0,
    WorkAndRest_Source_MIUI = 1,
    WorkAndRest_Source_MANUAL = 2
} WorkAndRest_Source;
#define _WorkAndRest_Source_MIN WorkAndRest_Source_NONE
#define _WorkAndRest_Source_MAX WorkAndRest_Source_MANUAL
#define _WorkAndRest_Source_ARRAYSIZE ((WorkAndRest_Source)(WorkAndRest_Source_MANUAL+1))

typedef enum _PhoneAlarm_OpCode
{
    PhoneAlarm_OpCode_ALERT = 0,
    PhoneAlarm_OpCode_DISMISS = 1,
    PhoneAlarm_OpCode_SNOOZE = 2
} PhoneAlarm_OpCode;
#define _PhoneAlarm_OpCode_MIN PhoneAlarm_OpCode_ALERT
#define _PhoneAlarm_OpCode_MAX PhoneAlarm_OpCode_SNOOZE
#define _PhoneAlarm_OpCode_ARRAYSIZE ((PhoneAlarm_OpCode)(PhoneAlarm_OpCode_SNOOZE+1))

/* Struct definitions */
typedef struct _ClockIdList
{
    pb_size_t id_count;
    uint32_t *id;
    /* @@protoc_insertion_point(struct:ClockIdList) */
} ClockIdList;

typedef struct _WorldClockIdList
{
    pb_size_t id_count;
    char **id;
    /* @@protoc_insertion_point(struct:WorldClockIdList) */
} WorldClockIdList;

typedef struct _ClockInfo_Data
{
    Time time;
    ClockMode clock_mode;
    bool has_week_days;
    uint8_t week_days;
    bool enable;
    char *label;
    /* @@protoc_insertion_point(struct:ClockInfo_Data) */
} ClockInfo_Data;

typedef struct _ClockInfo_List
{
    pb_size_t list_count;
    struct _ClockInfo *list;
    bool has_support_max_clocks;
    uint32_t support_max_clocks;
    /* @@protoc_insertion_point(struct:ClockInfo_List) */
} ClockInfo_List;

typedef struct _PhoneAlarm
{
    uint32_t id;
    bool has_alert_time;
    uint32_t alert_time;
    char *label;
    /* @@protoc_insertion_point(struct:PhoneAlarm) */
} PhoneAlarm;

typedef struct _WorkAndRest_Data
{
    Time bedtime;
    Time getup_time;
    int8_t remind_bed;
    /* @@protoc_insertion_point(struct:WorkAndRest_Data) */
} WorkAndRest_Data;

typedef struct _ClockInfo
{
    uint32_t id;
    ClockInfo_Data data;
    /* @@protoc_insertion_point(struct:ClockInfo) */
} ClockInfo;

typedef struct _PhoneAlarm_Operation
{
    PhoneAlarm_OpCode op_code;
    PhoneAlarm phone_alarm;
    /* @@protoc_insertion_point(struct:PhoneAlarm_Operation) */
} PhoneAlarm_Operation;

typedef struct _WorkAndRest
{
    WorkAndRest_Source source;
    bool has_data;
    WorkAndRest_Data data;
    /* @@protoc_insertion_point(struct:WorkAndRest) */
} WorkAndRest;

typedef struct _Clock
{
    pb_size_t which_payload;
    union
    {
        ClockInfo_List clock_info_list;
        ClockInfo_Data clock_data;
        ClockInfo clock_info;
        uint32_t id;
        ClockIdList clock_id_list;
        bool enable;
        ClockHoliday clock_holiday;
        ClockError clock_error;
        WorkAndRest work_and_rest;
        WorldClockIdList world_clock_id_list;
        char *world_clock_id;
        WorldClockResult world_clock_result;
        PhoneAlarm_Operation phone_alarm_operation;
    } payload;
    /* @@protoc_insertion_point(struct:Clock) */
} Clock;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Clock_init_default                       {0, {ClockInfo_List_init_default}}
#define ClockInfo_init_default                   {0, ClockInfo_Data_init_default}
#define ClockInfo_Data_init_default              {Time_init_default, _ClockMode_MIN, false, 0, 0, NULL}
#define ClockInfo_List_init_default              {0, NULL, false, 0}
#define ClockIdList_init_default                 {0, NULL}
#define WorkAndRest_init_default                 {_WorkAndRest_Source_MIN, false, WorkAndRest_Data_init_default}
#define WorkAndRest_Data_init_default            {Time_init_default, Time_init_default, 0}
#define WorldClockIdList_init_default            {0, NULL}
#define PhoneAlarm_init_default                  {0, false, 0, NULL}
#define PhoneAlarm_Operation_init_default        {_PhoneAlarm_OpCode_MIN, PhoneAlarm_init_default}
#define Clock_init_zero                          {0, {ClockInfo_List_init_zero}}
#define ClockInfo_init_zero                      {0, ClockInfo_Data_init_zero}
#define ClockInfo_Data_init_zero                 {Time_init_zero, _ClockMode_MIN, false, 0, 0, NULL}
#define ClockInfo_List_init_zero                 {0, NULL, false, 0}
#define ClockIdList_init_zero                    {0, NULL}
#define WorkAndRest_init_zero                    {_WorkAndRest_Source_MIN, false, WorkAndRest_Data_init_zero}
#define WorkAndRest_Data_init_zero               {Time_init_zero, Time_init_zero, 0}
#define WorldClockIdList_init_zero               {0, NULL}
#define PhoneAlarm_init_zero                     {0, false, 0, NULL}
#define PhoneAlarm_Operation_init_zero           {_PhoneAlarm_OpCode_MIN, PhoneAlarm_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define ClockIdList_id_tag                       1
#define WorldClockIdList_id_tag                  1
#define ClockInfo_Data_time_tag                  2
#define ClockInfo_Data_clock_mode_tag            3
#define ClockInfo_Data_week_days_tag             4
#define ClockInfo_Data_enable_tag                5
#define ClockInfo_Data_label_tag                 6
#define ClockInfo_List_list_tag                  1
#define ClockInfo_List_support_max_clocks_tag    2
#define PhoneAlarm_id_tag                        1
#define PhoneAlarm_alert_time_tag                2
#define PhoneAlarm_label_tag                     3
#define WorkAndRest_Data_bedtime_tag             1
#define WorkAndRest_Data_getup_time_tag          2
#define WorkAndRest_Data_remind_bed_tag          3
#define ClockInfo_id_tag                         1
#define ClockInfo_data_tag                       2
#define PhoneAlarm_Operation_op_code_tag         1
#define PhoneAlarm_Operation_phone_alarm_tag     2
#define WorkAndRest_source_tag                   1
#define WorkAndRest_data_tag                     2
#define Clock_clock_info_list_tag                1
#define Clock_clock_data_tag                     2
#define Clock_clock_info_tag                     3
#define Clock_id_tag                             4
#define Clock_clock_id_list_tag                  5
#define Clock_enable_tag                         6
#define Clock_clock_holiday_tag                  7
#define Clock_clock_error_tag                    8
#define Clock_work_and_rest_tag                  9
#define Clock_world_clock_id_list_tag            11
#define Clock_world_clock_id_tag                 12
#define Clock_world_clock_result_tag             13
#define Clock_phone_alarm_operation_tag          16

/* Struct field encoding specification for nanopb */
extern const pb_field_t Clock_fields[14];
extern const pb_field_t ClockInfo_fields[3];
extern const pb_field_t ClockInfo_Data_fields[6];
extern const pb_field_t ClockInfo_List_fields[3];
extern const pb_field_t ClockIdList_fields[2];
extern const pb_field_t WorkAndRest_fields[3];
extern const pb_field_t WorkAndRest_Data_fields[4];
extern const pb_field_t WorldClockIdList_fields[2];
extern const pb_field_t PhoneAlarm_fields[4];
extern const pb_field_t PhoneAlarm_Operation_fields[3];

/* Maximum encoded size of messages (where known) */
/* Clock_size depends on runtime parameters */
/* ClockInfo_size depends on runtime parameters */
/* ClockInfo_Data_size depends on runtime parameters */
/* ClockInfo_List_size depends on runtime parameters */
/* ClockIdList_size depends on runtime parameters */
#define WorkAndRest_size                         62
#define WorkAndRest_Data_size                    58
/* WorldClockIdList_size depends on runtime parameters */
/* PhoneAlarm_size depends on runtime parameters */
/* PhoneAlarm_Operation_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define WEAR_CLOCK_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
