/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.6 at Fri Jun 10 15:10:20 2022. */

#ifndef PB_WEAR_STOCK_PB_H_INCLUDED
#define PB_WEAR_STOCK_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _Stock_StockID
{
    Stock_StockID_SYNC_STOCK_INFO = 0,
    Stock_StockID_SYNC_STOCK_INFO_LIST = 1,
    Stock_StockID_DELETE_STOCK = 2,
    Stock_StockID_SET_STOCK_LIST = 3,
    Stock_StockID_GET_STOCK_LIST = 4,
    Stock_StockID_WEAR_REQUEST = 5
} Stock_StockID;
#define _Stock_StockID_MIN Stock_StockID_SYNC_STOCK_INFO
#define _Stock_StockID_MAX Stock_StockID_WEAR_REQUEST
#define _Stock_StockID_ARRAYSIZE ((Stock_StockID)(Stock_StockID_WEAR_REQUEST+1))

/* Struct definitions */
typedef struct _StockInfo_List
{
    pb_size_t list_count;
    struct _StockInfo *list;
    /* @@protoc_insertion_point(struct:StockInfo_List) */
} StockInfo_List;

typedef struct _StockSymbol_List
{
    pb_size_t list_count;
    struct _StockSymbol *list;
    /* @@protoc_insertion_point(struct:StockSymbol_List) */
} StockSymbol_List;

typedef struct _StockInfo
{
    char *symbol;
    char *market;
    char *name;
    float latest_price;
    float pre_close;
    uint8_t halted;
    uint32_t timestamp;
    uint32_t delay_mintue;
    /* @@protoc_insertion_point(struct:StockInfo) */
} StockInfo;

typedef struct _StockSymbol
{
    char *symbol;
    bool is_widget;
    uint8_t order;
    /* @@protoc_insertion_point(struct:StockSymbol) */
} StockSymbol;

typedef struct _Stock
{
    pb_size_t which_payload;
    union
    {
        StockInfo stock_info;
        StockInfo_List stock_info_list;
        char *symbol;
        StockSymbol_List stock_symbol_list;
    } payload;
    /* @@protoc_insertion_point(struct:Stock) */
} Stock;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Stock_init_default                       {0, {StockInfo_init_default}}
#define StockInfo_init_default                   {NULL, NULL, NULL, 0, 0, 0, 0, 0}
#define StockInfo_List_init_default              {0, NULL}
#define StockSymbol_init_default                 {NULL, 0, 0}
#define StockSymbol_List_init_default            {0, NULL}
#define Stock_init_zero                          {0, {StockInfo_init_zero}}
#define StockInfo_init_zero                      {NULL, NULL, NULL, 0, 0, 0, 0, 0}
#define StockInfo_List_init_zero                 {0, NULL}
#define StockSymbol_init_zero                    {NULL, 0, 0}
#define StockSymbol_List_init_zero               {0, NULL}

/* Field tags (for use in manual encoding/decoding) */
#define StockInfo_List_list_tag                  1
#define StockSymbol_List_list_tag                1
#define StockInfo_symbol_tag                     1
#define StockInfo_market_tag                     2
#define StockInfo_name_tag                       3
#define StockInfo_latest_price_tag               4
#define StockInfo_pre_close_tag                  5
#define StockInfo_halted_tag                     6
#define StockInfo_timestamp_tag                  7
#define StockInfo_delay_mintue_tag               8
#define StockSymbol_symbol_tag                   1
#define StockSymbol_is_widget_tag                2
#define StockSymbol_order_tag                    3
#define Stock_stock_info_tag                     1
#define Stock_stock_info_list_tag                2
#define Stock_symbol_tag                         3
#define Stock_stock_symbol_list_tag              4

/* Struct field encoding specification for nanopb */
extern const pb_field_t Stock_fields[5];
extern const pb_field_t StockInfo_fields[9];
extern const pb_field_t StockInfo_List_fields[2];
extern const pb_field_t StockSymbol_fields[4];
extern const pb_field_t StockSymbol_List_fields[2];

/* Maximum encoded size of messages (where known) */
/* Stock_size depends on runtime parameters */
/* StockInfo_size depends on runtime parameters */
/* StockInfo_List_size depends on runtime parameters */
/* StockSymbol_size depends on runtime parameters */
/* StockSymbol_List_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define WEAR_STOCK_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
