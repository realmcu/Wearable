/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.6 at Fri Jun 10 15:10:20 2022. */

#ifndef PB_WEAR_GNSS_PB_H_INCLUDED
#define PB_WEAR_GNSS_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _Gnss_GnssID
{
    Gnss_GnssID_REQUEST_ONLINE = 0,
    Gnss_GnssID_REQUEST_OFFLINE = 1,
    Gnss_GnssID_SEND_GPS_INFO = 2
} Gnss_GnssID;
#define _Gnss_GnssID_MIN Gnss_GnssID_REQUEST_ONLINE
#define _Gnss_GnssID_MAX Gnss_GnssID_SEND_GPS_INFO
#define _Gnss_GnssID_ARRAYSIZE ((Gnss_GnssID)(Gnss_GnssID_SEND_GPS_INFO+1))

typedef enum _Data_Type
{
    Data_Type_AGPS = 1,
    Data_Type_BEIDOU = 2,
    Data_Type_GALILEO = 3
} Data_Type;
#define _Data_Type_MIN Data_Type_AGPS
#define _Data_Type_MAX Data_Type_GALILEO
#define _Data_Type_ARRAYSIZE ((Data_Type)(Data_Type_GALILEO+1))

/* Struct definitions */
typedef struct _Data
{
    Data_Type type;
    char *source;
    bool has_days;
    uint8_t days;
    bool has_need_gps_info;
    bool need_gps_info;
    bool has_expected_slice_length;
    uint32_t expected_slice_length;
    /* @@protoc_insertion_point(struct:Data) */
} Data;

typedef struct _GpsInfo
{
    uint32_t timestamp;
    double longitude;
    double latitude;
    bool has_altitude;
    double altitude;
    /* @@protoc_insertion_point(struct:GpsInfo) */
} GpsInfo;

typedef struct _Gnss
{
    pb_size_t which_payload;
    union
    {
        uint32_t days;
        Data data;
        GpsInfo gps_info;
    } payload;
    /* @@protoc_insertion_point(struct:Gnss) */
} Gnss;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Gnss_init_default                        {0, {0}}
#define Data_init_default                        {_Data_Type_MIN, NULL, false, 0, false, 0, false, 0}
#define GpsInfo_init_default                     {0, 0, 0, false, 0}
#define Gnss_init_zero                           {0, {0}}
#define Data_init_zero                           {_Data_Type_MIN, NULL, false, 0, false, 0, false, 0}
#define GpsInfo_init_zero                        {0, 0, 0, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Data_type_tag                            1
#define Data_source_tag                          2
#define Data_days_tag                            3
#define Data_need_gps_info_tag                   4
#define Data_expected_slice_length_tag           5
#define GpsInfo_timestamp_tag                    1
#define GpsInfo_longitude_tag                    2
#define GpsInfo_latitude_tag                     3
#define GpsInfo_altitude_tag                     4
#define Gnss_days_tag                            1
#define Gnss_data_tag                            2
#define Gnss_gps_info_tag                        3

/* Struct field encoding specification for nanopb */
extern const pb_field_t Gnss_fields[4];
extern const pb_field_t Data_fields[6];
extern const pb_field_t GpsInfo_fields[5];

/* Maximum encoded size of messages (where known) */
/* Gnss_size depends on runtime parameters */
/* Data_size depends on runtime parameters */
#define GpsInfo_size                             33

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define WEAR_GNSS_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
