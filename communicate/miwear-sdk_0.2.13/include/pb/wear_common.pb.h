/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.6 at Fri Jun 10 15:10:20 2022. */

#ifndef PB_WEAR_COMMON_PB_H_INCLUDED
#define PB_WEAR_COMMON_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _ErrorCode
{
    ErrorCode_NO_ERROR = 0,
    ErrorCode_NOT_SUPPORT = 1,
    ErrorCode_DEPENDENCY_NOT_READY = 2,
    ErrorCode_SET_FAILED = 3,
    ErrorCode_PARAM_ERROR = 4,
    ErrorCode_BUSY_IN_OTA = 5,
    ErrorCode_BUSY_IN_UPLOAD_LOG = 6,
    ErrorCode_BUSY_IN_A2DP = 7,
    ErrorCode_UNKNOWN = 255
} ErrorCode;
#define _ErrorCode_MIN ErrorCode_NO_ERROR
#define _ErrorCode_MAX ErrorCode_UNKNOWN
#define _ErrorCode_ARRAYSIZE ((ErrorCode)(ErrorCode_UNKNOWN+1))

typedef enum _PrepareStatus
{
    PrepareStatus_READY = 0,
    PrepareStatus_BUSY = 1,
    PrepareStatus_DUPLICATED = 2,
    PrepareStatus_LOW_STORAGE = 3,
    PrepareStatus_LOW_BATTERY = 4,
    PrepareStatus_DOWNGRADE = 5,
    PrepareStatus_OP_NOT_SUPPORT = 6,
    PrepareStatus_FAILED = 255
} PrepareStatus;
#define _PrepareStatus_MIN PrepareStatus_READY
#define _PrepareStatus_MAX PrepareStatus_FAILED
#define _PrepareStatus_ARRAYSIZE ((PrepareStatus)(PrepareStatus_FAILED+1))

typedef enum _Sex
{
    Sex_NEUTRAL = 0,
    Sex_MALE = 1,
    Sex_FEMALE = 2
} Sex;
#define _Sex_MIN Sex_NEUTRAL
#define _Sex_MAX Sex_FEMALE
#define _Sex_ARRAYSIZE ((Sex)(Sex_FEMALE+1))

typedef enum _SportType
{
    SportType_NONE = 0,
    SportType_RUN_OUTDOOR = 1,
    SportType_WALK_OUTDOOR = 2,
    SportType_RUN_INDOOR = 3,
    SportType_CLIMBING = 4,
    SportType_CROSS_COUNTRY = 5,
    SportType_RIDE_OUTDOOR = 6,
    SportType_RIDE_INDOOR = 7,
    SportType_FREE_TRAINING = 8,
    SportType_SWIM_INDOOR = 9,
    SportType_SWIM_OUTDOOR = 10,
    SportType_ELLIPTICAL_MACHINE = 11,
    SportType_YOGA = 12,
    SportType_ROWING_MACHINE = 13,
    SportType_ROPE_SKIPPING = 14,
    SportType_HIKING_OUTDOOR = 15,
    SportType_HIGH_INTERVAL_TRAINING = 16,
    SportType_TRIATHLON = 17,
    SportType_GENERAL_BALL = 18,
    SportType_BASKETBALL_S = 19,
    SportType_GOLF_S = 20,
    SportType_SKIING = 21,
    SportType_OUTDOOR_WALK_CATEGORY = 22,
    SportType_OUTDOOR_NON_WALK_CATEGORY = 23,
    SportType_SAILBOAT = 100,
    SportType_PADDLE_BOARD = 101,
    SportType_WATER_POLO = 102,
    SportType_AQUATIC_SPORT = 103,
    SportType_SURFING = 104,
    SportType_CANOEING = 105,
    SportType_KAYAK_RAFTING = 106,
    SportType_ROWING = 107,
    SportType_MOTORBOAT = 108,
    SportType_WEB_SWIMMING = 109,
    SportType_DRIVING = 110,
    SportType_FANCY_SWIMMING = 111,
    SportType_SNORKELING = 112,
    SportType_KITE_SURFING = 113,
    SportType_INDOOR_SURFING = 114,
    SportType_DRAGON_BOAT = 115,
    SportType_ROCK_CLIMBING = 200,
    SportType_SKATE = 201,
    SportType_ROLLER_SKATING = 202,
    SportType_PARKOUR = 203,
    SportType_ATV = 204,
    SportType_PARAGLIDER = 205,
    SportType_BICYCLE_MOTO = 206,
    SportType_HEEL_AND_TOE = 207,
    SportType_CLIMBING_MACHINE = 300,
    SportType_CLIMB_STAIRS = 301,
    SportType_STEPPER = 302,
    SportType_CORE_TRAINING = 303,
    SportType_FLEXIBILITY_TRAINING = 304,
    SportType_PILATES = 305,
    SportType_GYMNASTICS = 306,
    SportType_STRETCH = 307,
    SportType_STRENGTH_TRAINING = 308,
    SportType_CROSS_FIT = 309,
    SportType_AEROBICS = 310,
    SportType_PHYSICAL_TRAINING = 311,
    SportType_WALL_BALL = 312,
    SportType_DUMBBELL_TRAINING = 313,
    SportType_BARBELL_TRAINING = 314,
    SportType_WEIGHTLIFTING = 315,
    SportType_DEADLIFT = 316,
    SportType_BOBBY_JUMP = 317,
    SportType_SIT_UPS = 318,
    SportType_FUNCTIONAL_TRAINING = 319,
    SportType_UPPER_LIMB_TRAINING = 320,
    SportType_LOWER_LIMB_TRAINING = 321,
    SportType_WAIST_TRAINING = 322,
    SportType_BACK_TRAINING = 323,
    SportType_SPINNING = 324,
    SportType_WALKING_MACHINE = 325,
    SportType_STEP_TRAINING = 326,
    SportType_SINGLE_BAR = 327,
    SportType_PARALLEL_BARS = 328,
    SportType_GROUP_CALLISTHENICS = 329,
    SportType_STRIKE = 330,
    SportType_BATTLE_ROPE = 331,
    SportType_MIXED_AEROBIC = 332,
    SportType_WALK_INDOOR = 333,
    SportType_GYM = 399,
    SportType_SQUARE_DANCE = 400,
    SportType_BELLY_DANCE = 401,
    SportType_BALLET = 402,
    SportType_STREET_DANCE = 403,
    SportType_ZUMBA = 404,
    SportType_NATIONAL_DANCE = 405,
    SportType_JAZZ = 406,
    SportType_LATIN_DANCE = 407,
    SportType_HIP_HOP_DANCE = 408,
    SportType_POLE_DANCE = 409,
    SportType_BREAKDANCING = 410,
    SportType_SOCIAL_DANCING = 411,
    SportType_DANCE = 499,
    SportType_BOXING = 500,
    SportType_WRESTLING = 501,
    SportType_MARTIAL_ARTS = 502,
    SportType_TAICHI = 503,
    SportType_MUAY_THAI = 504,
    SportType_JUDO = 505,
    SportType_TAEKWONDO = 506,
    SportType_KARATE = 507,
    SportType_FREE_SPARRING = 508,
    SportType_SWORDSMANSHIP = 509,
    SportType_FENCING = 510,
    SportType_JUJITSU = 511,
    SportType_FOOTBALL = 600,
    SportType_BASKETBALL = 601,
    SportType_VOLLEYBALL = 602,
    SportType_BASEBALL = 603,
    SportType_SOFTBALL = 604,
    SportType_RUGBY = 605,
    SportType_HOCKEY = 606,
    SportType_PINGPONG = 607,
    SportType_BADMINTON = 608,
    SportType_TENNIS = 609,
    SportType_CRICKET = 610,
    SportType_HANDBALL = 611,
    SportType_BOWLING = 612,
    SportType_SQUASH = 613,
    SportType_BILLIARDS = 614,
    SportType_SHUTTLECOCK = 615,
    SportType_BEACH_FOOTBALL = 616,
    SportType_BEACH_VOLLEYBALL = 617,
    SportType_SEPAK_TAKRAW = 618,
    SportType_GOLF = 619,
    SportType_FOOSBALL = 620,
    SportType_INDOOR_FOOTBALL = 621,
    SportType_SANDBAGS_BALL = 622,
    SportType_BOCCI = 623,
    SportType_HIHI_BALL = 624,
    SportType_GATEBALL = 625,
    SportType_DODGEBALL = 626,
    SportType_SHUFFLE_BALL = 627,
    SportType_OUTDOOR_SKATING = 700,
    SportType_CURLING = 701,
    SportType_SNOW_SPORTS = 702,
    SportType_SNOWMOBILE = 703,
    SportType_PUCK = 704,
    SportType_SNOW_CAR = 705,
    SportType_SLED = 706,
    SportType_INDOOR__SKATING = 707,
    SportType_SNOWBOARDING = 708,
    SportType_DOUBLE_BOARD_SKIING = 709,
    SportType_CROSS_COUNTRY_SKIING = 710,
    SportType_ARCHERY = 800,
    SportType_DARTS = 801,
    SportType_HORSE_RIDING = 802,
    SportType_TUG_OF_WAR = 803,
    SportType_HULA_HOOP = 804,
    SportType_FLY_KITE = 805,
    SportType_FISHING = 806,
    SportType_FRISBEE = 807,
    SportType_SHUTTLECOCK_KICKING = 808,
    SportType_SWING = 809,
    SportType_MOTION_SENSING_GAME = 810,
    SportType_ELECTRONIC_SPORTS = 811,
    SportType_CHESS = 900,
    SportType_DRAUGHTS = 901,
    SportType_WEIQI = 902,
    SportType_BRIDGE = 903,
    SportType_BOARD_GAMES = 904,
    SportType_EQUESTTRIAN = 10000,
    SportType_TRACK_AND_FIELD = 10001,
    SportType_RACING_CAR = 10002
} SportType;
#define _SportType_MIN SportType_NONE
#define _SportType_MAX SportType_RACING_CAR
#define _SportType_ARRAYSIZE ((SportType)(SportType_RACING_CAR+1))

typedef enum _SportTargetType
{
    SportTargetType_TARGET_DURATION = 1,
    SportTargetType_TARGET_CALORIE = 2,
    SportTargetType_TARGET_DISTANCE = 3,
    SportTargetType_TARGET_PACE = 4,
    SportTargetType_TARGET_STEP_FREQUENCY = 5,
    SportTargetType_TARGET_COUNT = 6
} SportTargetType;
#define _SportTargetType_MIN SportTargetType_TARGET_DURATION
#define _SportTargetType_MAX SportTargetType_TARGET_COUNT
#define _SportTargetType_ARRAYSIZE ((SportTargetType)(SportTargetType_TARGET_COUNT+1))

typedef enum _SportState
{
    SportState_SPORT_START = 0,
    SportState_SPORT_PAUSE = 1,
    SportState_SPORT_RESUME = 2,
    SportState_SPORT_STOP = 3
} SportState;
#define _SportState_MIN SportState_SPORT_START
#define _SportState_MAX SportState_SPORT_STOP
#define _SportState_ARRAYSIZE ((SportState)(SportState_SPORT_STOP+1))

typedef enum _Function
{
    Function_SETTING = 1,
    Function_FITNESS = 2,
    Function_HEART_RATE = 3,
    Function_PRESSURE = 4,
    Function_ENERGY = 5,
    Function_SLEEP = 6,
    Function_BREATH = 7,
    Function_ANAEROBIC_THRESHOLD = 8,
    Function_CALENDAR = 9,
    Function_CLOCK = 10,
    Function_STOPWATCH = 11,
    Function_TIME_KEEPING = 12,
    Function_WEATHER = 13,
    Function_STOCK = 14,
    Function_APP_LIST = 15,
    Function_SPORT_LIST = 16,
    Function_HOME = 17,
    Function_MUSIC_CONTROLLER = 18,
    Function_VOICE_ASSISTANT = 19,
    Function_BLOOD_OXYGEN = 20,
    Function_CONTROL_CENTER = 21,
    Function_WOMEN_HEALTH = 22,
    Function_SYSTEM = 23,
    Function_TEMPERATURE = 24,
    Function_ALIPAY = 32,
    Function_CARD = 33,
    Function_DOOR = 34,
    Function_BUS = 35,
    Function_BANK = 36,
    Function_WECHAT_PAY = 37
} Function;
#define _Function_MIN Function_SETTING
#define _Function_MAX Function_WECHAT_PAY
#define _Function_ARRAYSIZE ((Function)(Function_WECHAT_PAY+1))

typedef enum _WidgetStyle
{
    WidgetStyle_STYLE_11 = 1,
    WidgetStyle_STYLE_12 = 2,
    WidgetStyle_STYLE_21 = 3,
    WidgetStyle_STYLE_22 = 4,
    WidgetStyle_STYLE_SQUARE = 8,
    WidgetStyle_STYLE_RECT = 9,
    WidgetStyle_STYLE_CIRCLE = 10
} WidgetStyle;
#define _WidgetStyle_MIN WidgetStyle_STYLE_11
#define _WidgetStyle_MAX WidgetStyle_STYLE_CIRCLE
#define _WidgetStyle_ARRAYSIZE ((WidgetStyle)(WidgetStyle_STYLE_CIRCLE+1))

typedef enum _WidgetSubType
{
    WidgetSubType_SYSTEM_DARK_STYLE11_BATTERY = 17,
    WidgetSubType_APP_LIST_DARK_STYLE11_ENTRY = 1041,
    WidgetSubType_SPORT_LIST_DARK_STYLE11_START = 2065,
    WidgetSubType_SPORT_LIST_DARK_STYLE12_START = 2081,
    WidgetSubType_SPORT_LIST_LIGHT_STYLE11_START = 2321,
    WidgetSubType_SPORT_LIST_LIGHT_STYLE12_START = 2337,
    WidgetSubType_FITNESS_DARK_STYLE11_VITALITY = 3089,
    WidgetSubType_FITNESS_DARK_STYLE11_STEP = 3090,
    WidgetSubType_FITNESS_DARK_STYLE11_CALORIE = 3091,
    WidgetSubType_FITNESS_DARK_STYLE11_STAND = 3092,
    WidgetSubType_FITNESS_DARK_STYLE11_ACTIVITY = 3093,
    WidgetSubType_FITNESS_DARK_STYLE12_VITALITY = 3105,
    WidgetSubType_FITNESS_DARK_STYLE12_STEP = 3106,
    WidgetSubType_FITNESS_DARK_STYLE12_CALORIE = 3107,
    WidgetSubType_FITNESS_DARK_STYLE12_STAND = 3108,
    WidgetSubType_FITNESS_DARK_STYLE12_ACTIVITY = 3109,
    WidgetSubType_FITNESS_LIGHT_STYLE11_STEP = 3346,
    WidgetSubType_FITNESS_LIGHT_STYLE11_CALORIE = 3347,
    WidgetSubType_FITNESS_LIGHT_STYLE11_STAND = 3348,
    WidgetSubType_FITNESS_LIGHT_STYLE11_ACTIVITY = 3349,
    WidgetSubType_FITNESS_LIGHT_STYLE12_STEP = 3362,
    WidgetSubType_FITNESS_LIGHT_STYLE12_CALORIE = 3363,
    WidgetSubType_FITNESS_LIGHT_STYLE12_STAND = 3364,
    WidgetSubType_FITNESS_LIGHT_STYLE12_ACTIVITY = 3365,
    WidgetSubType_FITNESS_DARK_SQUARE_VITALITY = 3201,
    WidgetSubType_FITNESS_DARK_RECT_VITALITY = 3217,
    WidgetSubType_HEART_RATE_DARK_STYLE11_CURRENT = 4113,
    WidgetSubType_HEART_RATE_DARK_STYLE12_SPLASH = 4130,
    WidgetSubType_HEART_RATE_DARK_STYLE12_LINE = 4131,
    WidgetSubType_HEART_RATE_LIGHT_STYLE11_CURRENT = 4369,
    WidgetSubType_HEART_RATE_LIGHT_STYLE12_SPLASH = 4386,
    WidgetSubType_HEART_RATE_LIGHT_STYLE12_LINE = 4387,
    WidgetSubType_HEART_RATE_DARK_RECT_SPLASH = 4242,
    WidgetSubType_BREATH_DARK_STYLE11_ENTRY = 5137,
    WidgetSubType_BREATH_DARK_STYLE12_ENTRY = 5153,
    WidgetSubType_BREATH_LIGHT_STYLE11_ENTRY = 5393,
    WidgetSubType_BREATH_LIGHT_STYLE12_ENTRY = 5409,
    WidgetSubType_PRESSURE_DARK_STYLE11_CURRENT = 6161,
    WidgetSubType_PRESSURE_DARK_STYLE12_SPLASH = 6178,
    WidgetSubType_PRESSURE_LIGHT_STYLE11_CURRENT = 6417,
    WidgetSubType_PRESSURE_LIGHT_STYLE12_SPLASH = 6434,
    WidgetSubType_BLOOD_OXYGEN_DARK_STYLE11_CURRENT = 7185,
    WidgetSubType_BLOOD_OXYGEN_DARK_STYLE12_SPLASH = 7202,
    WidgetSubType_BLOOD_OXYGEN_LIGHT_STYLE11_CURRENT = 7441,
    WidgetSubType_BLOOD_OXYGEN_LIGHT_STYLE12_SPLASH = 7458,
    WidgetSubType_SLEEP_DARK_STYLE11_RESULT = 8209,
    WidgetSubType_SLEEP_DARK_STYLE12_RESULT = 8225,
    WidgetSubType_SLEEP_LIGHT_STYLE11_RESULT = 8465,
    WidgetSubType_SLEEP_LIGHT_STYLE12_RESULT = 8481,
    WidgetSubType_WOMEN_HEALTH_DARK_STYLE12_DAYS = 9249,
    WidgetSubType_WOMEN_HEALTH_LIGHT_STYLE12_DAYS = 9505,
    WidgetSubType_WEATHER_DARK_STYLE11_BASIC = 10257,
    WidgetSubType_WEATHER_DARK_STYLE12_BASIC = 10273,
    WidgetSubType_WEATHER_LIGHT_STYLE11_BASIC = 10513,
    WidgetSubType_WEATHER_LIGHT_STYLE12_BASIC = 10529,
    WidgetSubType_WEATHER_DARK_RECT_WEEK = 10386,
    WidgetSubType_WEATHER_LIGHT_RECT_WEEK = 10642,
    WidgetSubType_VOICE_ASSISTANT_DARK_STYLE22_XIAOAI = 11329,
    WidgetSubType_VOICE_ASSISTANT_DARK_STYLE22_ALEXA = 11330,
    WidgetSubType_ALIPAY_DARK_STYLE11_ENTRY = 12305,
    WidgetSubType_ALIPAY_DARK_STYLE22_CODE = 12354,
    WidgetSubType_WECHAT_PAY_DARK_STYLE11_ENTRY = 13329,
    WidgetSubType_WECHAT_PAY_DARK_STYLE22_CODE = 13378,
    WidgetSubType_MUSIC_DARK_STYLE11_CONTROL = 14353,
    WidgetSubType_MUSIC_DARK_STYLE12_CONTROL = 14369,
    WidgetSubType_MUSIC_LIGHT_STYLE11_CONTROL = 14609,
    WidgetSubType_MUSIC_LIGHT_STYLE12_CONTROL = 14625,
    WidgetSubType_CARD_DARK_STYLE22_SWITCH_CARD = 15425,
    WidgetSubType_STOPWATCH_DARK_STYLE11_ENTRY = 16401,
    WidgetSubType_STOPWATCH_DARK_STYLE12_CONTROL = 16418,
    WidgetSubType_TIME_KEEPING_DARK_STYLE11_ENTRY = 17425,
    WidgetSubType_TIME_KEEPING_DARK_STYLE12_CONTROL = 17442,
    WidgetSubType_TIME_KEEPING_DARK_SQUARE_ENTRY = 17537,
    WidgetSubType_CALENDAR_DARK_STYLE12_NEXT = 18465,
    WidgetSubType_CALENDAR_DARK_RECT_NEXT = 18577,
    WidgetSubType_CALENDAR_DARK_CIRCLE_DAY = 18594,
    WidgetSubType_CALENDAR_LIGHT_SQUARE_NEXT = 18817,
    WidgetSubType_TEMPERATURE_DARK_STYLE11_ENTRY = 19473,
    WidgetSubType_TEMPERATURE_LIGHT_STYLE11_ENTRY = 19729
} WidgetSubType;
#define _WidgetSubType_MIN WidgetSubType_SYSTEM_DARK_STYLE11_BATTERY
#define _WidgetSubType_MAX WidgetSubType_TEMPERATURE_LIGHT_STYLE11_ENTRY
#define _WidgetSubType_ARRAYSIZE ((WidgetSubType)(WidgetSubType_TEMPERATURE_LIGHT_STYLE11_ENTRY+1))

typedef enum _ImageFormat
{
    ImageFormat_RGB_565 = 0,
    ImageFormat_RGB_565_SWAP = 1,
    ImageFormat_ARGB_8888_LE = 2,
    ImageFormat_ARGB_8888 = 3,
    ImageFormat_RGB888 = 4,
    ImageFormat_JPEG = 5,
    ImageFormat_PNG = 6
} ImageFormat;
#define _ImageFormat_MIN ImageFormat_RGB_565
#define _ImageFormat_MAX ImageFormat_PNG
#define _ImageFormat_ARRAYSIZE ((ImageFormat)(ImageFormat_PNG+1))

typedef enum _CompressMode
{
    CompressMode_NO_COMPRESS = 0
} CompressMode;
#define _CompressMode_MIN CompressMode_NO_COMPRESS
#define _CompressMode_MAX CompressMode_NO_COMPRESS
#define _CompressMode_ARRAYSIZE ((CompressMode)(CompressMode_NO_COMPRESS+1))

typedef enum _OptionalSwitcher
{
    OptionalSwitcher_NO_FEATURE = 0,
    OptionalSwitcher_ON = 1,
    OptionalSwitcher_OFF = 2
} OptionalSwitcher;
#define _OptionalSwitcher_MIN OptionalSwitcher_NO_FEATURE
#define _OptionalSwitcher_MAX OptionalSwitcher_OFF
#define _OptionalSwitcher_ARRAYSIZE ((OptionalSwitcher)(OptionalSwitcher_OFF+1))

typedef enum _TemperatureUnit
{
    TemperatureUnit_NO_UNIT = 0,
    TemperatureUnit_CENTIGRADE = 1,
    TemperatureUnit_FAHRENHEIT = 2
} TemperatureUnit;
#define _TemperatureUnit_MIN TemperatureUnit_NO_UNIT
#define _TemperatureUnit_MAX TemperatureUnit_FAHRENHEIT
#define _TemperatureUnit_ARRAYSIZE ((TemperatureUnit)(TemperatureUnit_FAHRENHEIT+1))

typedef enum _ClockMode
{
    ClockMode_CLOCK_ONCE = 0,
    ClockMode_CLOCK_EVERY_DAY = 1,
    ClockMode_CLOCK_WORKDAY = 2,
    ClockMode_CLOCK_HOLIDAY = 3,
    ClockMode_CLOCK_MONDAY_TO_FRIDAY = 4,
    ClockMode_CLOCK_CUSTOM = 5
} ClockMode;
#define _ClockMode_MIN ClockMode_CLOCK_ONCE
#define _ClockMode_MAX ClockMode_CLOCK_CUSTOM
#define _ClockMode_ARRAYSIZE ((ClockMode)(ClockMode_CLOCK_CUSTOM+1))

/* Struct definitions */
typedef struct _ClockHoliday
{
    uint16_t year;
    pb_size_t free_days_count;
    char **free_days;
    pb_size_t work_days_count;
    char **work_days;
    /* @@protoc_insertion_point(struct:ClockHoliday) */
} ClockHoliday;

typedef struct _Date
{
    uint16_t year;
    uint8_t month;
    uint8_t day;
    /* @@protoc_insertion_point(struct:Date) */
} Date;

typedef struct _KeyValue
{
    char *key;
    int16_t value;
    /* @@protoc_insertion_point(struct:KeyValue) */
} KeyValue;

typedef struct _RangeValue
{
    int16_t from;
    int16_t to;
    /* @@protoc_insertion_point(struct:RangeValue) */
} RangeValue;

typedef struct _Time
{
    uint8_t hour;
    uint8_t minuter;
    bool has_second;
    uint8_t second;
    bool has_millisecond;
    uint16_t millisecond;
    /* @@protoc_insertion_point(struct:Time) */
} Time;

typedef struct _Timezone
{
    int8_t offset;
    bool has_dst_saving;
    int8_t dst_saving;
    char *id;
    char *id_spec;
    /* @@protoc_insertion_point(struct:Timezone) */
} Timezone;

/* Default values for struct fields */

/* Initializer values for message structs */
#define ClockHoliday_init_default                {0, 0, NULL, 0, NULL}
#define Timezone_init_default                    {0, false, 0, NULL, NULL}
#define Date_init_default                        {0, 0, 0}
#define Time_init_default                        {0, 0, false, 0, false, 0}
#define KeyValue_init_default                    {NULL, 0}
#define RangeValue_init_default                  {0, 0}
#define ClockHoliday_init_zero                   {0, 0, NULL, 0, NULL}
#define Timezone_init_zero                       {0, false, 0, NULL, NULL}
#define Date_init_zero                           {0, 0, 0}
#define Time_init_zero                           {0, 0, false, 0, false, 0}
#define KeyValue_init_zero                       {NULL, 0}
#define RangeValue_init_zero                     {0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define ClockHoliday_year_tag                    1
#define ClockHoliday_free_days_tag               2
#define ClockHoliday_work_days_tag               3
#define Date_year_tag                            1
#define Date_month_tag                           2
#define Date_day_tag                             3
#define KeyValue_key_tag                         1
#define KeyValue_value_tag                       2
#define RangeValue_from_tag                      1
#define RangeValue_to_tag                        2
#define Time_hour_tag                            1
#define Time_minuter_tag                         2
#define Time_second_tag                          3
#define Time_millisecond_tag                     4
#define Timezone_offset_tag                      1
#define Timezone_dst_saving_tag                  2
#define Timezone_id_tag                          3
#define Timezone_id_spec_tag                     4

/* Struct field encoding specification for nanopb */
extern const pb_field_t ClockHoliday_fields[4];
extern const pb_field_t Timezone_fields[5];
extern const pb_field_t Date_fields[4];
extern const pb_field_t Time_fields[5];
extern const pb_field_t KeyValue_fields[3];
extern const pb_field_t RangeValue_fields[3];

/* Maximum encoded size of messages (where known) */
/* ClockHoliday_size depends on runtime parameters */
/* Timezone_size depends on runtime parameters */
#define Date_size                                18
#define Time_size                                24
/* KeyValue_size depends on runtime parameters */
#define RangeValue_size                          12

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define WEAR_COMMON_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
