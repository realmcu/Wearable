/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.6 at Fri Jun 10 15:10:20 2022. */

#ifndef PB_WEAR_NFC_PB_H_INCLUDED
#define PB_WEAR_NFC_PB_H_INCLUDED
#include <pb.h>

#include "wear_common.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _IssueCardStatus
{
    IssueCardStatus_START = 0,
    IssueCardStatus_SUCCESS = 1,
    IssueCardStatus_FAILURE = 2
} IssueCardStatus;
#define _IssueCardStatus_MIN IssueCardStatus_START
#define _IssueCardStatus_MAX IssueCardStatus_FAILURE
#define _IssueCardStatus_ARRAYSIZE ((IssueCardStatus)(IssueCardStatus_FAILURE+1))

typedef enum _IssueCardType
{
    IssueCardType_DOOR_CARD = 0,
    IssueCardType_BUS_CARD = 1,
    IssueCardType_UNION_PAY_CARD = 2,
    IssueCardType_CLOUD_CARD = 3,
    IssueCardType_MASTER_CARD = 4
} IssueCardType;
#define _IssueCardType_MIN IssueCardType_DOOR_CARD
#define _IssueCardType_MAX IssueCardType_MASTER_CARD
#define _IssueCardType_ARRAYSIZE ((IssueCardType)(IssueCardType_MASTER_CARD+1))

typedef enum _Nfc_NfcID
{
    Nfc_NfcID_COMMAND = 0,
    Nfc_NfcID_ISSUE_CARD = 1,
    Nfc_NfcID_ADD_CARD = 2,
    Nfc_NfcID_DEL_CARD = 3,
    Nfc_NfcID_SYNC_CARD_LIST = 4,
    Nfc_NfcID_SET_DEFAULT_CARD = 5,
    Nfc_NfcID_GET_DEFAULT_CARD = 6,
    Nfc_NfcID_SET_BALANCE = 7,
    Nfc_NfcID_GET_BALANCE = 8,
    Nfc_NfcID_SET_CONFIG = 9,
    Nfc_NfcID_CAPABILITY_SET = 10,
    Nfc_NfcID_COMMAND_BATCH = 16,
    Nfc_NfcID_GET_CARD_SWITCHER_TIME = 11,
    Nfc_NfcID_UPDATE_CARD_SWITCHER_TIME = 12,
    Nfc_NfcID_ADD_CARD_SWITCHER_TIME = 13,
    Nfc_NfcID_REMOVE_CARD_SWITCHER_TIME = 14
} Nfc_NfcID;
#define _Nfc_NfcID_MIN Nfc_NfcID_COMMAND
#define _Nfc_NfcID_MAX Nfc_NfcID_COMMAND_BATCH
#define _Nfc_NfcID_ARRAYSIZE ((Nfc_NfcID)(Nfc_NfcID_COMMAND_BATCH+1))

typedef enum _CardSwitcher_Result_Code
{
    CardSwitcher_Result_Code_SUCCESS = 0,
    CardSwitcher_Result_Code_AID_NOT_FOUND = 1,
    CardSwitcher_Result_Code_TIME_CONFLICT = 2,
    CardSwitcher_Result_Code_FAIL = 10
} CardSwitcher_Result_Code;
#define _CardSwitcher_Result_Code_MIN CardSwitcher_Result_Code_SUCCESS
#define _CardSwitcher_Result_Code_MAX CardSwitcher_Result_Code_FAIL
#define _CardSwitcher_Result_Code_ARRAYSIZE ((CardSwitcher_Result_Code)(CardSwitcher_Result_Code_FAIL+1))

/* Struct definitions */
typedef struct _CardSwitcher
{
    char *aid;
    pb_size_t time_count;
    struct _Time *time;
    /* @@protoc_insertion_point(struct:CardSwitcher) */
} CardSwitcher;

typedef struct _CardSwitcher_List
{
    pb_size_t list_count;
    struct _CardSwitcher *list;
    /* @@protoc_insertion_point(struct:CardSwitcher_List) */
} CardSwitcher_List;

typedef struct _CommandInfo
{
    pb_bytes_array_t *data;
    char *expect_status;
    /* @@protoc_insertion_point(struct:CommandInfo) */
} CommandInfo;

typedef struct _CommandInfo_List
{
    pb_size_t list_count;
    struct _CommandInfo *list;
    /* @@protoc_insertion_point(struct:CommandInfo_List) */
} CommandInfo_List;

typedef struct _BalanceInfo
{
    char *aid;
    uint32_t balance;
    /* @@protoc_insertion_point(struct:BalanceInfo) */
} BalanceInfo;

typedef struct _CardData
{
    pb_bytes_array_t *uid;
    uint16_t sak;
    pb_bytes_array_t *atqa;
    uint32_t size;
    char *content;
    /* @@protoc_insertion_point(struct:CardData) */
} CardData;

typedef struct _CardInfo
{
    IssueCardType type;
    char *aid;
    char *name;
    char *icon_url;
    char *sid;
    bool has_balance;
    uint32_t balance;
    bool has_support_hci;
    bool support_hci;
    bool has_trade_length;
    uint32_t trade_length;
    bool has_trade_offset;
    uint32_t trade_offset;
    bool has_balance_offset;
    uint32_t balance_offset;
    pb_size_t tlv_hci_rule_count;
    struct _CardInfo_TlvHciRule *tlv_hci_rule;
    pb_size_t balance_command_count;
    char **balance_command;
    /* @@protoc_insertion_point(struct:CardInfo) */
} CardInfo;

typedef struct _CardInfo_List
{
    pb_size_t list_count;
    struct _CardInfo *list;
    bool has_full;
    bool full;
    /* @@protoc_insertion_point(struct:CardInfo_List) */
} CardInfo_List;

typedef struct _CardInfo_TlvHciRule
{
    char *aid;
    uint32_t data_offset;
    char *hci_prefix;
    pb_size_t trade_amount_tags_count;
    char **trade_amount_tags;
    bool has_trade_amount_offset;
    uint32_t trade_amount_offset;
    pb_size_t balance_tags_count;
    char **balance_tags;
    bool has_balance_offset;
    uint32_t balance_offset;
    /* @@protoc_insertion_point(struct:CardInfo_TlvHciRule) */
} CardInfo_TlvHciRule;

typedef struct _CardSwitcher_Result
{
    uint8_t code;
    char *conflict_aid;
    /* @@protoc_insertion_point(struct:CardSwitcher_Result) */
} CardSwitcher_Result;

typedef struct _IssueCard
{
    IssueCardStatus status;
    bool has_type;
    IssueCardType type;
    bool has_need_read_card;
    bool need_read_card;
    char *icon_url;
    char *sid;
    /* @@protoc_insertion_point(struct:IssueCard) */
} IssueCard;

typedef struct _Nfc
{
    pb_size_t which_payload;
    union
    {
        pb_bytes_array_t *command;
        IssueCard issue_card;
        CardData card_data;
        CardInfo card_info;
        CardInfo_List card_info_list;
        char *aid;
        BalanceInfo balance_info;
        char *config;
        CommandInfo_List command_info_list;
        uint32_t capability;
        CardSwitcher_List card_switcher_list;
        CardSwitcher card_switcher;
        CardSwitcher_Result card_switcher_result;
    } payload;
    /* @@protoc_insertion_point(struct:Nfc) */
} Nfc;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Nfc_init_default                         {0, {NULL}}
#define IssueCard_init_default                   {_IssueCardStatus_MIN, false, _IssueCardType_MIN, false, 0, NULL, NULL}
#define CardData_init_default                    {NULL, 0, NULL, 0, NULL}
#define CardInfo_init_default                    {_IssueCardType_MIN, NULL, NULL, NULL, NULL, false, 0, false, 0, false, 0, false, 0, false, 0, 0, NULL, 0, NULL}
#define CardInfo_TlvHciRule_init_default         {NULL, 0, NULL, 0, NULL, false, 0, 0, NULL, false, 0}
#define CardInfo_List_init_default               {0, NULL, false, 0}
#define BalanceInfo_init_default                 {NULL, 0}
#define CommandInfo_init_default                 {NULL, NULL}
#define CommandInfo_List_init_default            {0, NULL}
#define CardSwitcher_init_default                {NULL, 0, NULL}
#define CardSwitcher_List_init_default           {0, NULL}
#define CardSwitcher_Result_init_default         {0, NULL}
#define Nfc_init_zero                            {0, {NULL}}
#define IssueCard_init_zero                      {_IssueCardStatus_MIN, false, _IssueCardType_MIN, false, 0, NULL, NULL}
#define CardData_init_zero                       {NULL, 0, NULL, 0, NULL}
#define CardInfo_init_zero                       {_IssueCardType_MIN, NULL, NULL, NULL, NULL, false, 0, false, 0, false, 0, false, 0, false, 0, 0, NULL, 0, NULL}
#define CardInfo_TlvHciRule_init_zero            {NULL, 0, NULL, 0, NULL, false, 0, 0, NULL, false, 0}
#define CardInfo_List_init_zero                  {0, NULL, false, 0}
#define BalanceInfo_init_zero                    {NULL, 0}
#define CommandInfo_init_zero                    {NULL, NULL}
#define CommandInfo_List_init_zero               {0, NULL}
#define CardSwitcher_init_zero                   {NULL, 0, NULL}
#define CardSwitcher_List_init_zero              {0, NULL}
#define CardSwitcher_Result_init_zero            {0, NULL}

/* Field tags (for use in manual encoding/decoding) */
#define CardSwitcher_aid_tag                     1
#define CardSwitcher_time_tag                    2
#define CardSwitcher_List_list_tag               1
#define CommandInfo_data_tag                     1
#define CommandInfo_expect_status_tag            2
#define CommandInfo_List_list_tag                1
#define BalanceInfo_aid_tag                      1
#define BalanceInfo_balance_tag                  2
#define CardData_uid_tag                         1
#define CardData_sak_tag                         2
#define CardData_atqa_tag                        3
#define CardData_size_tag                        4
#define CardData_content_tag                     5
#define CardInfo_type_tag                        1
#define CardInfo_aid_tag                         2
#define CardInfo_name_tag                        3
#define CardInfo_icon_url_tag                    4
#define CardInfo_sid_tag                         5
#define CardInfo_balance_tag                     6
#define CardInfo_support_hci_tag                 7
#define CardInfo_trade_length_tag                8
#define CardInfo_trade_offset_tag                9
#define CardInfo_balance_offset_tag              10
#define CardInfo_tlv_hci_rule_tag                11
#define CardInfo_balance_command_tag             12
#define CardInfo_List_list_tag                   1
#define CardInfo_List_full_tag                   2
#define CardInfo_TlvHciRule_aid_tag              1
#define CardInfo_TlvHciRule_data_offset_tag      2
#define CardInfo_TlvHciRule_hci_prefix_tag       3
#define CardInfo_TlvHciRule_trade_amount_tags_tag 4
#define CardInfo_TlvHciRule_trade_amount_offset_tag 5
#define CardInfo_TlvHciRule_balance_tags_tag     6
#define CardInfo_TlvHciRule_balance_offset_tag   7
#define CardSwitcher_Result_code_tag             1
#define CardSwitcher_Result_conflict_aid_tag     2
#define IssueCard_status_tag                     1
#define IssueCard_type_tag                       2
#define IssueCard_need_read_card_tag             3
#define IssueCard_icon_url_tag                   4
#define IssueCard_sid_tag                        5
#define Nfc_command_tag                          1
#define Nfc_issue_card_tag                       2
#define Nfc_card_data_tag                        3
#define Nfc_card_info_tag                        4
#define Nfc_card_info_list_tag                   5
#define Nfc_aid_tag                              6
#define Nfc_balance_info_tag                     7
#define Nfc_config_tag                           8
#define Nfc_command_info_list_tag                9
#define Nfc_capability_tag                       10
#define Nfc_card_switcher_list_tag               11
#define Nfc_card_switcher_tag                    12
#define Nfc_card_switcher_result_tag             13

/* Struct field encoding specification for nanopb */
extern const pb_field_t Nfc_fields[14];
extern const pb_field_t IssueCard_fields[6];
extern const pb_field_t CardData_fields[6];
extern const pb_field_t CardInfo_fields[13];
extern const pb_field_t CardInfo_TlvHciRule_fields[8];
extern const pb_field_t CardInfo_List_fields[3];
extern const pb_field_t BalanceInfo_fields[3];
extern const pb_field_t CommandInfo_fields[3];
extern const pb_field_t CommandInfo_List_fields[2];
extern const pb_field_t CardSwitcher_fields[3];
extern const pb_field_t CardSwitcher_List_fields[2];
extern const pb_field_t CardSwitcher_Result_fields[3];

/* Maximum encoded size of messages (where known) */
/* Nfc_size depends on runtime parameters */
/* IssueCard_size depends on runtime parameters */
/* CardData_size depends on runtime parameters */
/* CardInfo_size depends on runtime parameters */
/* CardInfo_TlvHciRule_size depends on runtime parameters */
/* CardInfo_List_size depends on runtime parameters */
/* BalanceInfo_size depends on runtime parameters */
/* CommandInfo_size depends on runtime parameters */
/* CommandInfo_List_size depends on runtime parameters */
/* CardSwitcher_size depends on runtime parameters */
/* CardSwitcher_List_size depends on runtime parameters */
/* CardSwitcher_Result_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define WEAR_NFC_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
